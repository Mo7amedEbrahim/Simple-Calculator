
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000353a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000353a  000035ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080008c  0080008c  000035fa  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  000035fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000178a  00000000  00000000  00006ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000846a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000085ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a79e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b89f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c824  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cc66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d4f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 90 18 	call	0x3120	; 0x3120 <main>
      8a:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e6       	ldi	r22, 0x6B	; 107
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_SetPinDirection>:
#include "DIO_interface.h"




ES_t DIO_SetPinDirection(u8 Port,u8 Pin, u8 Direction){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_SetPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_SetPinDirection+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <DIO_SetPinDirection+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	8a 83       	std	Y+2, r24	; 0x02
     cae:	6b 83       	std	Y+3, r22	; 0x03
     cb0:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
     cb2:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	3e 83       	std	Y+6, r19	; 0x06
     cbc:	2d 83       	std	Y+5, r18	; 0x05
     cbe:	8d 81       	ldd	r24, Y+5	; 0x05
     cc0:	9e 81       	ldd	r25, Y+6	; 0x06
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	91 05       	cpc	r25, r1
     cc6:	09 f4       	brne	.+2      	; 0xcca <DIO_SetPinDirection+0x2c>
     cc8:	48 c0       	rjmp	.+144    	; 0xd5a <DIO_SetPinDirection+0xbc>
     cca:	2d 81       	ldd	r18, Y+5	; 0x05
     ccc:	3e 81       	ldd	r19, Y+6	; 0x06
     cce:	22 30       	cpi	r18, 0x02	; 2
     cd0:	31 05       	cpc	r19, r1
     cd2:	2c f4       	brge	.+10     	; 0xcde <DIO_SetPinDirection+0x40>
     cd4:	8d 81       	ldd	r24, Y+5	; 0x05
     cd6:	9e 81       	ldd	r25, Y+6	; 0x06
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	71 f0       	breq	.+28     	; 0xcf8 <DIO_SetPinDirection+0x5a>
     cdc:	d1 c0       	rjmp	.+418    	; 0xe80 <DIO_SetPinDirection+0x1e2>
     cde:	2d 81       	ldd	r18, Y+5	; 0x05
     ce0:	3e 81       	ldd	r19, Y+6	; 0x06
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <DIO_SetPinDirection+0x4c>
     ce8:	69 c0       	rjmp	.+210    	; 0xdbc <DIO_SetPinDirection+0x11e>
     cea:	8d 81       	ldd	r24, Y+5	; 0x05
     cec:	9e 81       	ldd	r25, Y+6	; 0x06
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_SetPinDirection+0x58>
     cf4:	94 c0       	rjmp	.+296    	; 0xe1e <DIO_SetPinDirection+0x180>
     cf6:	c4 c0       	rjmp	.+392    	; 0xe80 <DIO_SetPinDirection+0x1e2>
		case PORTA:
		if(Direction == INPUT){
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	88 23       	and	r24, r24
     cfc:	a9 f4       	brne	.+42     	; 0xd28 <DIO_SetPinDirection+0x8a>
			CLR_BIT(DDRA_REG,Pin);
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_SetPinDirection+0x7e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_SetPinDirection+0x7a>
     d20:	80 95       	com	r24
     d22:	84 23       	and	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	16 c0       	rjmp	.+44     	; 0xd54 <DIO_SetPinDirection+0xb6>
		}
		else if(Direction == OUTPUT){
     d28:	8c 81       	ldd	r24, Y+4	; 0x04
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	99 f4       	brne	.+38     	; 0xd54 <DIO_SetPinDirection+0xb6>
			SET_BIT(DDRA_REG,Pin);
     d2e:	aa e3       	ldi	r26, 0x3A	; 58
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ea e3       	ldi	r30, 0x3A	; 58
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_SetPinDirection+0xae>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_SetPinDirection+0xaa>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	95 c0       	rjmp	.+298    	; 0xe84 <DIO_SetPinDirection+0x1e6>
		break;
		case PORTB:
		if(Direction == INPUT){
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	88 23       	and	r24, r24
     d5e:	a9 f4       	brne	.+42     	; 0xd8a <DIO_SetPinDirection+0xec>
			CLR_BIT(DDRB_REG,Pin);
     d60:	a7 e3       	ldi	r26, 0x37	; 55
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e7 e3       	ldi	r30, 0x37	; 55
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	48 2f       	mov	r20, r24
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 2e       	mov	r0, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_SetPinDirection+0xe0>
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	0a 94       	dec	r0
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_SetPinDirection+0xdc>
     d82:	80 95       	com	r24
     d84:	84 23       	and	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	16 c0       	rjmp	.+44     	; 0xdb6 <DIO_SetPinDirection+0x118>
		}
		else if(Direction == OUTPUT){
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	99 f4       	brne	.+38     	; 0xdb6 <DIO_SetPinDirection+0x118>
			SET_BIT(DDRB_REG,Pin);
     d90:	a7 e3       	ldi	r26, 0x37	; 55
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e7 e3       	ldi	r30, 0x37	; 55
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_SetPinDirection+0x110>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_SetPinDirection+0x10c>
     db2:	84 2b       	or	r24, r20
     db4:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	64 c0       	rjmp	.+200    	; 0xe84 <DIO_SetPinDirection+0x1e6>
		break;
		case PORTC:
		if(Direction == INPUT){
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	88 23       	and	r24, r24
     dc0:	a9 f4       	brne	.+42     	; 0xdec <DIO_SetPinDirection+0x14e>
			CLR_BIT(DDRC_REG,Pin);
     dc2:	a4 e3       	ldi	r26, 0x34	; 52
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e4 e3       	ldi	r30, 0x34	; 52
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_SetPinDirection+0x142>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_SetPinDirection+0x13e>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	16 c0       	rjmp	.+44     	; 0xe18 <DIO_SetPinDirection+0x17a>
		}
		else if(Direction == OUTPUT){
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	99 f4       	brne	.+38     	; 0xe18 <DIO_SetPinDirection+0x17a>
			SET_BIT(DDRC_REG,Pin);
     df2:	a4 e3       	ldi	r26, 0x34	; 52
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e4 e3       	ldi	r30, 0x34	; 52
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_SetPinDirection+0x172>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_SetPinDirection+0x16e>
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	33 c0       	rjmp	.+102    	; 0xe84 <DIO_SetPinDirection+0x1e6>
		break;
		case PORTD:
		if(Direction == INPUT){
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	88 23       	and	r24, r24
     e22:	a9 f4       	brne	.+42     	; 0xe4e <DIO_SetPinDirection+0x1b0>
			CLR_BIT(DDRD_REG,Pin);
     e24:	a1 e3       	ldi	r26, 0x31	; 49
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e1 e3       	ldi	r30, 0x31	; 49
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_SetPinDirection+0x1a4>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_SetPinDirection+0x1a0>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	16 c0       	rjmp	.+44     	; 0xe7a <DIO_SetPinDirection+0x1dc>
		}
		else if(Direction == OUTPUT){
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	99 f4       	brne	.+38     	; 0xe7a <DIO_SetPinDirection+0x1dc>
			SET_BIT(DDRD_REG,Pin);
     e54:	a1 e3       	ldi	r26, 0x31	; 49
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e1 e3       	ldi	r30, 0x31	; 49
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_SetPinDirection+0x1d4>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_SetPinDirection+0x1d0>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_SetPinDirection+0x1e6>
		break;
		default:
			Local_enuErrorstate = ES_OUT_OF_RANGE;	
     e80:	83 e0       	ldi	r24, 0x03	; 3
     e82:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enuErrorstate;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
}
     e86:	26 96       	adiw	r28, 0x06	; 6
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <DIO_SetPortDirection>:



ES_t DIO_SetPortDirection(u8 Port,u8 Direction){
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <DIO_SetPortDirection+0x6>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <DIO_SetPortDirection+0x8>
     ea0:	0f 92       	push	r0
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	8a 83       	std	Y+2, r24	; 0x02
     ea8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     eaa:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	3d 83       	std	Y+5, r19	; 0x05
     eb4:	2c 83       	std	Y+4, r18	; 0x04
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	91 05       	cpc	r25, r1
     ebe:	e1 f0       	breq	.+56     	; 0xef8 <DIO_SetPortDirection+0x60>
     ec0:	2c 81       	ldd	r18, Y+4	; 0x04
     ec2:	3d 81       	ldd	r19, Y+5	; 0x05
     ec4:	22 30       	cpi	r18, 0x02	; 2
     ec6:	31 05       	cpc	r19, r1
     ec8:	2c f4       	brge	.+10     	; 0xed4 <DIO_SetPortDirection+0x3c>
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	9d 81       	ldd	r25, Y+5	; 0x05
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	61 f0       	breq	.+24     	; 0xeea <DIO_SetPortDirection+0x52>
     ed2:	27 c0       	rjmp	.+78     	; 0xf22 <DIO_SetPortDirection+0x8a>
     ed4:	2c 81       	ldd	r18, Y+4	; 0x04
     ed6:	3d 81       	ldd	r19, Y+5	; 0x05
     ed8:	22 30       	cpi	r18, 0x02	; 2
     eda:	31 05       	cpc	r19, r1
     edc:	a1 f0       	breq	.+40     	; 0xf06 <DIO_SetPortDirection+0x6e>
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	9d 81       	ldd	r25, Y+5	; 0x05
     ee2:	83 30       	cpi	r24, 0x03	; 3
     ee4:	91 05       	cpc	r25, r1
     ee6:	b1 f0       	breq	.+44     	; 0xf14 <DIO_SetPortDirection+0x7c>
     ee8:	1c c0       	rjmp	.+56     	; 0xf22 <DIO_SetPortDirection+0x8a>
		case PORTA: DDRA_REG = Direction; Local_enuErrorstate = ES_OK; break;
     eea:	ea e3       	ldi	r30, 0x3A	; 58
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	80 83       	st	Z, r24
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	17 c0       	rjmp	.+46     	; 0xf26 <DIO_SetPortDirection+0x8e>
		case PORTB: DDRB_REG = Direction; Local_enuErrorstate = ES_OK; break;
     ef8:	e7 e3       	ldi	r30, 0x37	; 55
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	80 83       	st	Z, r24
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	10 c0       	rjmp	.+32     	; 0xf26 <DIO_SetPortDirection+0x8e>
		case PORTC: DDRC_REG = Direction; Local_enuErrorstate = ES_OK; break;
     f06:	e4 e3       	ldi	r30, 0x34	; 52
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	80 83       	st	Z, r24
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	09 c0       	rjmp	.+18     	; 0xf26 <DIO_SetPortDirection+0x8e>
		case PORTD: DDRD_REG = Direction; Local_enuErrorstate = ES_OK; break;
     f14:	e1 e3       	ldi	r30, 0x31	; 49
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	80 83       	st	Z, r24
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_SetPortDirection+0x8e>
		default: Local_enuErrorstate = ES_OUT_OF_RANGE;				   break;
     f22:	83 e0       	ldi	r24, 0x03	; 3
     f24:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <DIO_SetPinValue>:


ES_t DIO_SetPinValue(u8 Port,u8 Pin, u8 Value){
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <DIO_SetPinValue+0x6>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <DIO_SetPinValue+0x8>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <DIO_SetPinValue+0xa>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	8a 83       	std	Y+2, r24	; 0x02
     f48:	6b 83       	std	Y+3, r22	; 0x03
     f4a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
     f4c:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	3e 83       	std	Y+6, r19	; 0x06
     f56:	2d 83       	std	Y+5, r18	; 0x05
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	91 05       	cpc	r25, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <DIO_SetPinValue+0x2c>
     f62:	48 c0       	rjmp	.+144    	; 0xff4 <DIO_SetPinValue+0xbc>
     f64:	2d 81       	ldd	r18, Y+5	; 0x05
     f66:	3e 81       	ldd	r19, Y+6	; 0x06
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	2c f4       	brge	.+10     	; 0xf78 <DIO_SetPinValue+0x40>
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	71 f0       	breq	.+28     	; 0xf92 <DIO_SetPinValue+0x5a>
     f76:	d1 c0       	rjmp	.+418    	; 0x111a <DIO_SetPinValue+0x1e2>
     f78:	2d 81       	ldd	r18, Y+5	; 0x05
     f7a:	3e 81       	ldd	r19, Y+6	; 0x06
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <DIO_SetPinValue+0x4c>
     f82:	69 c0       	rjmp	.+210    	; 0x1056 <DIO_SetPinValue+0x11e>
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <DIO_SetPinValue+0x58>
     f8e:	94 c0       	rjmp	.+296    	; 0x10b8 <DIO_SetPinValue+0x180>
     f90:	c4 c0       	rjmp	.+392    	; 0x111a <DIO_SetPinValue+0x1e2>
		case PORTA:
		if(Value == LOW){
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	88 23       	and	r24, r24
     f96:	a9 f4       	brne	.+42     	; 0xfc2 <DIO_SetPinValue+0x8a>
			CLR_BIT(PORTA_REG,Pin);
     f98:	ab e3       	ldi	r26, 0x3B	; 59
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	eb e3       	ldi	r30, 0x3B	; 59
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_SetPinValue+0x7e>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_SetPinValue+0x7a>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	16 c0       	rjmp	.+44     	; 0xfee <DIO_SetPinValue+0xb6>
		}
		else if(Value == HIGH){
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	99 f4       	brne	.+38     	; 0xfee <DIO_SetPinValue+0xb6>
			SET_BIT(PORTA_REG,Pin);
     fc8:	ab e3       	ldi	r26, 0x3B	; 59
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	eb e3       	ldi	r30, 0x3B	; 59
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_SetPinValue+0xae>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_SetPinValue+0xaa>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	95 c0       	rjmp	.+298    	; 0x111e <DIO_SetPinValue+0x1e6>
		break;
		case PORTB:
		if(Value == LOW){
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	88 23       	and	r24, r24
     ff8:	a9 f4       	brne	.+42     	; 0x1024 <DIO_SetPinValue+0xec>
			CLR_BIT(PORTB_REG,Pin);
     ffa:	a8 e3       	ldi	r26, 0x38	; 56
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e8 e3       	ldi	r30, 0x38	; 56
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_SetPinValue+0xe0>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_SetPinValue+0xdc>
    101c:	80 95       	com	r24
    101e:	84 23       	and	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	16 c0       	rjmp	.+44     	; 0x1050 <DIO_SetPinValue+0x118>
		}
		else if(Value == HIGH){
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	99 f4       	brne	.+38     	; 0x1050 <DIO_SetPinValue+0x118>
			SET_BIT(PORTB_REG,Pin);
    102a:	a8 e3       	ldi	r26, 0x38	; 56
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e8 e3       	ldi	r30, 0x38	; 56
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_SetPinValue+0x110>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_SetPinValue+0x10c>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	64 c0       	rjmp	.+200    	; 0x111e <DIO_SetPinValue+0x1e6>
		break;
		case PORTC:
		if(Value == LOW){
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	88 23       	and	r24, r24
    105a:	a9 f4       	brne	.+42     	; 0x1086 <DIO_SetPinValue+0x14e>
			CLR_BIT(PORTC_REG,Pin);
    105c:	a5 e3       	ldi	r26, 0x35	; 53
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e5 e3       	ldi	r30, 0x35	; 53
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_SetPinValue+0x142>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_SetPinValue+0x13e>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	16 c0       	rjmp	.+44     	; 0x10b2 <DIO_SetPinValue+0x17a>
		}
		else if(Value == HIGH){
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	99 f4       	brne	.+38     	; 0x10b2 <DIO_SetPinValue+0x17a>
			SET_BIT(PORTC_REG,Pin);
    108c:	a5 e3       	ldi	r26, 0x35	; 53
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e3       	ldi	r30, 0x35	; 53
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_SetPinValue+0x172>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_SetPinValue+0x16e>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	33 c0       	rjmp	.+102    	; 0x111e <DIO_SetPinValue+0x1e6>
		break;
		case PORTD:
		if(Value == LOW){
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	88 23       	and	r24, r24
    10bc:	a9 f4       	brne	.+42     	; 0x10e8 <DIO_SetPinValue+0x1b0>
			CLR_BIT(PORTD_REG,Pin);
    10be:	a2 e3       	ldi	r26, 0x32	; 50
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e2 e3       	ldi	r30, 0x32	; 50
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_SetPinValue+0x1a4>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_SetPinValue+0x1a0>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	16 c0       	rjmp	.+44     	; 0x1114 <DIO_SetPinValue+0x1dc>
		}
		else if(Value == HIGH){
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	99 f4       	brne	.+38     	; 0x1114 <DIO_SetPinValue+0x1dc>
			SET_BIT(PORTD_REG,Pin);
    10ee:	a2 e3       	ldi	r26, 0x32	; 50
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e2 e3       	ldi	r30, 0x32	; 50
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_SetPinValue+0x1d4>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_SetPinValue+0x1d0>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_SetPinValue+0x1e6>
		break;
		default:
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorstate;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1120:	26 96       	adiw	r28, 0x06	; 6
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <DIO_TogPinValue>:

ES_t DIO_TogPinValue(u8 Port,u8 Pin){
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <DIO_TogPinValue+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <DIO_TogPinValue+0x8>
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	8a 83       	std	Y+2, r24	; 0x02
    1142:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1144:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	3d 83       	std	Y+5, r19	; 0x05
    114e:	2c 83       	std	Y+4, r18	; 0x04
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	91 05       	cpc	r25, r1
    1158:	61 f1       	breq	.+88     	; 0x11b2 <DIO_TogPinValue+0x80>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	2c f4       	brge	.+10     	; 0x116e <DIO_TogPinValue+0x3c>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	69 f0       	breq	.+26     	; 0x1186 <DIO_TogPinValue+0x54>
    116c:	64 c0       	rjmp	.+200    	; 0x1236 <DIO_TogPinValue+0x104>
    116e:	2c 81       	ldd	r18, Y+4	; 0x04
    1170:	3d 81       	ldd	r19, Y+5	; 0x05
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	99 f1       	breq	.+102    	; 0x11de <DIO_TogPinValue+0xac>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_TogPinValue+0x52>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <DIO_TogPinValue+0xd8>
    1184:	58 c0       	rjmp	.+176    	; 0x1236 <DIO_TogPinValue+0x104>
			case PORTA:
				TOG_BIT(PORTA_REG,Pin);
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_TogPinValue+0x72>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_TogPinValue+0x6e>
    11a8:	84 27       	eor	r24, r20
    11aa:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	44 c0       	rjmp	.+136    	; 0x123a <DIO_TogPinValue+0x108>
			break;
			case PORTB:
				TOG_BIT(PORTB_REG,Pin);
    11b2:	a8 e3       	ldi	r26, 0x38	; 56
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e8 e3       	ldi	r30, 0x38	; 56
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_TogPinValue+0x9e>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_TogPinValue+0x9a>
    11d4:	84 27       	eor	r24, r20
    11d6:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	2e c0       	rjmp	.+92     	; 0x123a <DIO_TogPinValue+0x108>
			break;
			case PORTC:
				TOG_BIT(PORTC_REG,Pin);
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_TogPinValue+0xca>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_TogPinValue+0xc6>
    1200:	84 27       	eor	r24, r20
    1202:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	18 c0       	rjmp	.+48     	; 0x123a <DIO_TogPinValue+0x108>
			break;
			case PORTD:
				TOG_BIT(PORTD_REG,Pin);
    120a:	a2 e3       	ldi	r26, 0x32	; 50
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e2 e3       	ldi	r30, 0x32	; 50
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_TogPinValue+0xf6>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_TogPinValue+0xf2>
    122c:	84 27       	eor	r24, r20
    122e:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_TogPinValue+0x108>
			break;
			default:
				Local_enuErrorstate = ES_OUT_OF_RANGE;
    1236:	83 e0       	ldi	r24, 0x03	; 3
    1238:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_enuErrorstate;
    123a:	89 81       	ldd	r24, Y+1	; 0x01
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <DIO_SetPortValue>:



ES_t DIO_SetPortValue(u8 Port,u8 Value){
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <DIO_SetPortValue+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <DIO_SetPortValue+0x8>
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	8a 83       	std	Y+2, r24	; 0x02
    125c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    125e:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3d 83       	std	Y+5, r19	; 0x05
    1268:	2c 83       	std	Y+4, r18	; 0x04
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	91 05       	cpc	r25, r1
    1272:	e1 f0       	breq	.+56     	; 0x12ac <DIO_SetPortValue+0x60>
    1274:	2c 81       	ldd	r18, Y+4	; 0x04
    1276:	3d 81       	ldd	r19, Y+5	; 0x05
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	2c f4       	brge	.+10     	; 0x1288 <DIO_SetPortValue+0x3c>
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	61 f0       	breq	.+24     	; 0x129e <DIO_SetPortValue+0x52>
    1286:	27 c0       	rjmp	.+78     	; 0x12d6 <DIO_SetPortValue+0x8a>
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	a1 f0       	breq	.+40     	; 0x12ba <DIO_SetPortValue+0x6e>
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	b1 f0       	breq	.+44     	; 0x12c8 <DIO_SetPortValue+0x7c>
    129c:	1c c0       	rjmp	.+56     	; 0x12d6 <DIO_SetPortValue+0x8a>
		case PORTA: PORTA_REG = Value; Local_enuErrorstate = ES_OK; break;
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	80 83       	st	Z, r24
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	17 c0       	rjmp	.+46     	; 0x12da <DIO_SetPortValue+0x8e>
		case PORTB: PORTB_REG = Value; Local_enuErrorstate = ES_OK; break;
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	80 83       	st	Z, r24
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	10 c0       	rjmp	.+32     	; 0x12da <DIO_SetPortValue+0x8e>
		case PORTC: PORTC_REG = Value; Local_enuErrorstate = ES_OK; break;
    12ba:	e5 e3       	ldi	r30, 0x35	; 53
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	80 83       	st	Z, r24
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <DIO_SetPortValue+0x8e>
		case PORTD: PORTD_REG = Value; Local_enuErrorstate = ES_OK; break;
    12c8:	e2 e3       	ldi	r30, 0x32	; 50
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	80 83       	st	Z, r24
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_SetPortValue+0x8e>
		default: Local_enuErrorstate = ES_OUT_OF_RANGE;				break;
    12d6:	83 e0       	ldi	r24, 0x03	; 3
    12d8:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_enuErrorstate;
    12da:	89 81       	ldd	r24, Y+1	; 0x01
}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Port,u8 Pin){
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <DIO_u8GetPinValue+0x6>
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <DIO_u8GetPinValue+0x8>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3d 83       	std	Y+5, r19	; 0x05
    1306:	2c 83       	std	Y+4, r18	; 0x04
    1308:	4c 81       	ldd	r20, Y+4	; 0x04
    130a:	5d 81       	ldd	r21, Y+5	; 0x05
    130c:	41 30       	cpi	r20, 0x01	; 1
    130e:	51 05       	cpc	r21, r1
    1310:	49 f1       	breq	.+82     	; 0x1364 <DIO_u8GetPinValue+0x78>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	91 05       	cpc	r25, r1
    131a:	34 f4       	brge	.+12     	; 0x1328 <DIO_u8GetPinValue+0x3c>
    131c:	2c 81       	ldd	r18, Y+4	; 0x04
    131e:	3d 81       	ldd	r19, Y+5	; 0x05
    1320:	21 15       	cp	r18, r1
    1322:	31 05       	cpc	r19, r1
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_u8GetPinValue+0x52>
    1326:	57 c0       	rjmp	.+174    	; 0x13d6 <DIO_u8GetPinValue+0xea>
    1328:	4c 81       	ldd	r20, Y+4	; 0x04
    132a:	5d 81       	ldd	r21, Y+5	; 0x05
    132c:	42 30       	cpi	r20, 0x02	; 2
    132e:	51 05       	cpc	r21, r1
    1330:	61 f1       	breq	.+88     	; 0x138a <DIO_u8GetPinValue+0x9e>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	d1 f1       	breq	.+116    	; 0x13b0 <DIO_u8GetPinValue+0xc4>
    133c:	4c c0       	rjmp	.+152    	; 0x13d6 <DIO_u8GetPinValue+0xea>
		case PORTA: return GET_BIT(PINA_REG,Pin); break;
    133e:	e9 e3       	ldi	r30, 0x39	; 57
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	88 2f       	mov	r24, r24
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a9 01       	movw	r20, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_u8GetPinValue+0x6a>
    1352:	55 95       	asr	r21
    1354:	47 95       	ror	r20
    1356:	8a 95       	dec	r24
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_u8GetPinValue+0x66>
    135a:	ca 01       	movw	r24, r20
    135c:	58 2f       	mov	r21, r24
    135e:	51 70       	andi	r21, 0x01	; 1
    1360:	5b 83       	std	Y+3, r21	; 0x03
    1362:	3a c0       	rjmp	.+116    	; 0x13d8 <DIO_u8GetPinValue+0xec>
		case PORTB: return GET_BIT(PINB_REG,Pin); break;
    1364:	e6 e3       	ldi	r30, 0x36	; 54
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_u8GetPinValue+0x90>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_u8GetPinValue+0x8c>
    1380:	ca 01       	movw	r24, r20
    1382:	58 2f       	mov	r21, r24
    1384:	51 70       	andi	r21, 0x01	; 1
    1386:	5b 83       	std	Y+3, r21	; 0x03
    1388:	27 c0       	rjmp	.+78     	; 0x13d8 <DIO_u8GetPinValue+0xec>
		case PORTC: return GET_BIT(PINC_REG,Pin); break;
    138a:	e3 e3       	ldi	r30, 0x33	; 51
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_u8GetPinValue+0xb6>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_u8GetPinValue+0xb2>
    13a6:	ca 01       	movw	r24, r20
    13a8:	58 2f       	mov	r21, r24
    13aa:	51 70       	andi	r21, 0x01	; 1
    13ac:	5b 83       	std	Y+3, r21	; 0x03
    13ae:	14 c0       	rjmp	.+40     	; 0x13d8 <DIO_u8GetPinValue+0xec>
		case PORTD: return GET_BIT(PIND_REG,Pin); break;
    13b0:	e0 e3       	ldi	r30, 0x30	; 48
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_u8GetPinValue+0xdc>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_u8GetPinValue+0xd8>
    13cc:	ca 01       	movw	r24, r20
    13ce:	58 2f       	mov	r21, r24
    13d0:	51 70       	andi	r21, 0x01	; 1
    13d2:	5b 83       	std	Y+3, r21	; 0x03
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <DIO_u8GetPinValue+0xec>
	}
	return 0;
    13d6:	1b 82       	std	Y+3, r1	; 0x03
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <LED_init>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_init(u8 DIO_PORT,u8 DIO_PIN){
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <LED_init+0x6>
    13f0:	0f 92       	push	r0
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	8a 83       	std	Y+2, r24	; 0x02
    13f8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    13fa:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinDirection(DIO_PORT,DIO_PIN,OUTPUT);
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	6b 81       	ldd	r22, Y+3	; 0x03
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
	Local_enuErrorstate = ES_OK;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <LED_ON>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_ON(u8 DIO_PORT,u8 DIO_PIN){
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <LED_ON+0x6>
    141e:	0f 92       	push	r0
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	8a 83       	std	Y+2, r24	; 0x02
    1426:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1428:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinValue(DIO_PORT,DIO_PIN,HIGH);
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	6b 81       	ldd	r22, Y+3	; 0x03
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
	Local_enuErrorstate = ES_OK;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1438:	89 81       	ldd	r24, Y+1	; 0x01
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <LED_OFF>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_OFF(u8 DIO_PORT,u8 DIO_PIN){
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <LED_OFF+0x6>
    144c:	0f 92       	push	r0
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	8a 83       	std	Y+2, r24	; 0x02
    1454:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1456:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinValue(DIO_PORT,DIO_PIN,LOW);
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	6b 81       	ldd	r22, Y+3	; 0x03
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
	Local_enuErrorstate = ES_OK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1466:	89 81       	ldd	r24, Y+1	; 0x01
}
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <LED_Toggle>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_Toggle(u8 DIO_PORT,u8 DIO_PIN){
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <LED_Toggle+0x6>
    147a:	0f 92       	push	r0
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	8a 83       	std	Y+2, r24	; 0x02
    1482:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_OK;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	89 83       	std	Y+1, r24	; 0x01
	DIO_TogPinValue(DIO_PORT,DIO_PIN);
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	6b 81       	ldd	r22, Y+3	; 0x03
    148c:	0e 94 99 08 	call	0x1132	; 0x1132 <DIO_TogPinValue>
	Local_enuErrorstate = ES_OK;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <LCD_WriteCommand8Bit>:

@brief Writes a command to the 8-bit data port of the LCD
@param Command The command to be written to the LCD
@return ES_OK if the command was written successfully, ES_NOK otherwise
*/
ES_t LCD_WriteCommand8Bit(u8 Command){
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <LCD_WriteCommand8Bit+0x6>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    14ae:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to LOW		(INSTRUCTION)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,LOW);
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	66 e0       	ldi	r22, 0x06	; 6
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
	//Send the command throw data port
	DIO_SetPortValue(DATA_PORT_8_BIT,Command);
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	6a 81       	ldd	r22, Y+2	; 0x02
    14be:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    14c2:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <LCD_WriteData8Bit>:
 * 
 * @return An error state indicating the success or failure of the operation.
 * @retval ES_OK The data was successfully written to the LCD.
 * @retval ES_NOK The data was not successfully written to the LCD.
 */
ES_t LCD_WriteData8Bit(u8 Data){
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <LCD_WriteData8Bit+0x6>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    14e2:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to HIGH		(DATA)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	66 e0       	ldi	r22, 0x06	; 6
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
	//Send the DATA throw data port
	DIO_SetPortValue(DATA_PORT_8_BIT,Data);
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	6a 81       	ldd	r22, Y+2	; 0x02
    14f2:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    14f6:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <LCD_8BitInitialize>:

ES_t LCD_8BitInitialize(void){
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1514:	19 82       	std	Y+1, r1	; 0x01
	/*	Set Directions	*/
	SetDirections8Bit();
    1516:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <SetDirections8Bit>
	/*					*/
	FunctionSet8Bit();
    151a:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <FunctionSet8Bit>
	DisplayOnOffControl8Bit();
    151e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <DisplayOnOffControl8Bit>
	DisplayClear8Bit();
    1522:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <DisplayClear8Bit>
	EntryModeSet8Bit();
    1526:	0e 94 96 10 	call	0x212c	; 0x212c <EntryModeSet8Bit>
	Local_enuErrorstate = ES_OK;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <LCD_WriteCommand4Bit>:
/***********************************************************************/
ES_t LCD_WriteCommand4Bit(u8 Command){
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <LCD_WriteCommand4Bit+0x6>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1544:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to LOW		(INSTRUCTION)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,LOW);
    1546:	83 e0       	ldi	r24, 0x03	; 3
    1548:	66 e0       	ldi	r22, 0x06	; 6
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
	//Send the D7:D4 data first
	DIO_SetPortValue(DATA_PORT_8_BIT,Command>>4);
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	98 2f       	mov	r25, r24
    1554:	92 95       	swap	r25
    1556:	9f 70       	andi	r25, 0x0F	; 15
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	69 2f       	mov	r22, r25
    155c:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    1560:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SendEnablePulse>
	//Send the D3:D0 data second
	DIO_SetPortValue(DATA_PORT_8_BIT,Command&0x0f);
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	98 2f       	mov	r25, r24
    1568:	9f 70       	andi	r25, 0x0F	; 15
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	69 2f       	mov	r22, r25
    156e:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    1572:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    157a:	89 81       	ldd	r24, Y+1	; 0x01
}
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <LCD_WriteData4Bit>:

ES_t LCD_WriteData4Bit(u8 Data){
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <LCD_WriteData4Bit+0x6>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1592:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to HIGH		(DATA)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	66 e0       	ldi	r22, 0x06	; 6
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
	//Send the D7:D4 data first
	DIO_SetPortValue(DATA_PORT_8_BIT,Data>>4);
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	98 2f       	mov	r25, r24
    15a2:	92 95       	swap	r25
    15a4:	9f 70       	andi	r25, 0x0F	; 15
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	69 2f       	mov	r22, r25
    15aa:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    15ae:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SendEnablePulse>
	//Send the D3:D0 data second
	DIO_SetPortValue(DATA_PORT_8_BIT,Data&0x0f);
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	98 2f       	mov	r25, r24
    15b6:	9f 70       	andi	r25, 0x0F	; 15
    15b8:	82 e0       	ldi	r24, 0x02	; 2
    15ba:	69 2f       	mov	r22, r25
    15bc:	0e 94 26 09 	call	0x124c	; 0x124c <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    15c0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <LCD_4BitInitialize>:

ES_t LCD_4BitInitialize(void){
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	0f 92       	push	r0
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    15de:	19 82       	std	Y+1, r1	; 0x01
	SetDirections4Bit();
    15e0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <SetDirections4Bit>
	FunctionSet4Bit();
    15e4:	0e 94 1e 11 	call	0x223c	; 0x223c <FunctionSet4Bit>
	DisplayOnOffControl4Bit();
    15e8:	0e 94 67 12 	call	0x24ce	; 0x24ce <DisplayOnOffControl4Bit>
	DisplayClear4Bit();
    15ec:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <DisplayClear4Bit>
	EntryModeSet4Bit();
    15f0:	0e 94 91 15 	call	0x2b22	; 0x2b22 <EntryModeSet4Bit>
	Local_enuErrorstate = ES_OK;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <LCD_WriteString8Bit>:





ES_t LCD_WriteString8Bit(char *string){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <LCD_WriteString8Bit+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <LCD_WriteString8Bit+0x8>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1612:	1a 82       	std	Y+2, r1	; 0x02
	u8 i=0;
    1614:	19 82       	std	Y+1, r1	; 0x01
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <LCD_WriteString8Bit+0x32>
	while(string[i] != '\0'){
		LCD_WriteData8Bit(string[i]);
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	fc 01       	movw	r30, r24
    1624:	e2 0f       	add	r30, r18
    1626:	f3 1f       	adc	r31, r19
    1628:	80 81       	ld	r24, Z
    162a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <LCD_WriteData8Bit>
		i++;
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	8f 5f       	subi	r24, 0xFF	; 255
    1632:	89 83       	std	Y+1, r24	; 0x01


ES_t LCD_WriteString8Bit(char *string){
	ES_t Local_enuErrorstate = ES_NOK;
	u8 i=0;
	while(string[i] != '\0'){
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	fc 01       	movw	r30, r24
    1640:	e2 0f       	add	r30, r18
    1642:	f3 1f       	adc	r31, r19
    1644:	80 81       	ld	r24, Z
    1646:	88 23       	and	r24, r24
    1648:	39 f7       	brne	.-50     	; 0x1618 <LCD_WriteString8Bit+0x16>
		LCD_WriteData8Bit(string[i]);
		i++;
	}
	Local_enuErrorstate = ES_OK;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <LCD_GoToXY8Bit>:

ES_t LCD_GoToXY8Bit(u8 X_Pos,u8 Y_Pos){
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <LCD_GoToXY8Bit+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <LCD_GoToXY8Bit+0x8>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    166e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Address;
	/*	Location at First row	*/
	if(Y_Pos == 0){
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	88 23       	and	r24, r24
    1674:	19 f4       	brne	.+6      	; 0x167c <LCD_GoToXY8Bit+0x1e>
		Address = X_Pos;
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	06 c0       	rjmp	.+12     	; 0x1688 <LCD_GoToXY8Bit+0x2a>
	}
	/*	Location at second Row	*/
	else if(Y_Pos == 1){
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	19 f4       	brne	.+6      	; 0x1688 <LCD_GoToXY8Bit+0x2a>
		Address = X_Pos + 0x40;
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	80 5c       	subi	r24, 0xC0	; 192
    1686:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_WriteCommand8Bit(128+Address);
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	80 58       	subi	r24, 0x80	; 128
    168c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_WriteCommand8Bit>
	Local_enuErrorstate = ES_OK;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <LCD_WriteNumber8Bit>:

ES_t LCD_WriteNumber8Bit(s32 Number){
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	29 97       	sbiw	r28, 0x09	; 9
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	6e 83       	std	Y+6, r22	; 0x06
    16c2:	7f 83       	std	Y+7, r23	; 0x07
    16c4:	88 87       	std	Y+8, r24	; 0x08
    16c6:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorstate = ES_NOK;
    16c8:	1d 82       	std	Y+5, r1	; 0x05
	s32 NUM = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a0 e0       	ldi	r26, 0x00	; 0
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	ab 83       	std	Y+3, r26	; 0x03
    16d8:	bc 83       	std	Y+4, r27	; 0x04
	if(Number == 0){
    16da:	8e 81       	ldd	r24, Y+6	; 0x06
    16dc:	9f 81       	ldd	r25, Y+7	; 0x07
    16de:	a8 85       	ldd	r26, Y+8	; 0x08
    16e0:	b9 85       	ldd	r27, Y+9	; 0x09
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	a1 05       	cpc	r26, r1
    16e6:	b1 05       	cpc	r27, r1
    16e8:	21 f4       	brne	.+8      	; 0x16f2 <LCD_WriteNumber8Bit+0x4e>
		LCD_WriteData8Bit('0');
    16ea:	80 e3       	ldi	r24, 0x30	; 48
    16ec:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <LCD_WriteData8Bit>
    16f0:	50 c0       	rjmp	.+160    	; 0x1792 <LCD_WriteNumber8Bit+0xee>
	}
	else if(Number < 0){
    16f2:	8e 81       	ldd	r24, Y+6	; 0x06
    16f4:	9f 81       	ldd	r25, Y+7	; 0x07
    16f6:	a8 85       	ldd	r26, Y+8	; 0x08
    16f8:	b9 85       	ldd	r27, Y+9	; 0x09
    16fa:	bb 23       	and	r27, r27
    16fc:	0c f0       	brlt	.+2      	; 0x1700 <LCD_WriteNumber8Bit+0x5c>
    16fe:	49 c0       	rjmp	.+146    	; 0x1792 <LCD_WriteNumber8Bit+0xee>
		LCD_WriteData8Bit('-');
    1700:	8d e2       	ldi	r24, 0x2D	; 45
    1702:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <LCD_WriteData8Bit>
		Number = Number * (-1);
    1706:	8e 81       	ldd	r24, Y+6	; 0x06
    1708:	9f 81       	ldd	r25, Y+7	; 0x07
    170a:	a8 85       	ldd	r26, Y+8	; 0x08
    170c:	b9 85       	ldd	r27, Y+9	; 0x09
    170e:	b0 95       	com	r27
    1710:	a0 95       	com	r26
    1712:	90 95       	com	r25
    1714:	81 95       	neg	r24
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	af 4f       	sbci	r26, 0xFF	; 255
    171a:	bf 4f       	sbci	r27, 0xFF	; 255
    171c:	8e 83       	std	Y+6, r24	; 0x06
    171e:	9f 83       	std	Y+7, r25	; 0x07
    1720:	a8 87       	std	Y+8, r26	; 0x08
    1722:	b9 87       	std	Y+9, r27	; 0x09
    1724:	36 c0       	rjmp	.+108    	; 0x1792 <LCD_WriteNumber8Bit+0xee>
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	ab 81       	ldd	r26, Y+3	; 0x03
    172c:	bc 81       	ldd	r27, Y+4	; 0x04
    172e:	2a e0       	ldi	r18, 0x0A	; 10
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__mulsi3>
    173e:	7b 01       	movw	r14, r22
    1740:	8c 01       	movw	r16, r24
    1742:	8e 81       	ldd	r24, Y+6	; 0x06
    1744:	9f 81       	ldd	r25, Y+7	; 0x07
    1746:	a8 85       	ldd	r26, Y+8	; 0x08
    1748:	b9 85       	ldd	r27, Y+9	; 0x09
    174a:	2a e0       	ldi	r18, 0x0A	; 10
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	50 e0       	ldi	r21, 0x00	; 0
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 13 1a 	call	0x3426	; 0x3426 <__divmodsi4>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	8e 0d       	add	r24, r14
    1760:	9f 1d       	adc	r25, r15
    1762:	a0 1f       	adc	r26, r16
    1764:	b1 1f       	adc	r27, r17
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	ab 83       	std	Y+3, r26	; 0x03
    176c:	bc 83       	std	Y+4, r27	; 0x04
		Number = Number / 10;
    176e:	8e 81       	ldd	r24, Y+6	; 0x06
    1770:	9f 81       	ldd	r25, Y+7	; 0x07
    1772:	a8 85       	ldd	r26, Y+8	; 0x08
    1774:	b9 85       	ldd	r27, Y+9	; 0x09
    1776:	2a e0       	ldi	r18, 0x0A	; 10
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 13 1a 	call	0x3426	; 0x3426 <__divmodsi4>
    1786:	da 01       	movw	r26, r20
    1788:	c9 01       	movw	r24, r18
    178a:	8e 83       	std	Y+6, r24	; 0x06
    178c:	9f 83       	std	Y+7, r25	; 0x07
    178e:	a8 87       	std	Y+8, r26	; 0x08
    1790:	b9 87       	std	Y+9, r27	; 0x09
	}
	else if(Number < 0){
		LCD_WriteData8Bit('-');
		Number = Number * (-1);
	}
	while(Number){
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
    1794:	9f 81       	ldd	r25, Y+7	; 0x07
    1796:	a8 85       	ldd	r26, Y+8	; 0x08
    1798:	b9 85       	ldd	r27, Y+9	; 0x09
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	a1 05       	cpc	r26, r1
    179e:	b1 05       	cpc	r27, r1
    17a0:	11 f6       	brne	.-124    	; 0x1726 <LCD_WriteNumber8Bit+0x82>
    17a2:	23 c0       	rjmp	.+70     	; 0x17ea <LCD_WriteNumber8Bit+0x146>
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
		LCD_WriteData8Bit((NUM % 10) + 48);
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	ab 81       	ldd	r26, Y+3	; 0x03
    17aa:	bc 81       	ldd	r27, Y+4	; 0x04
    17ac:	2a e0       	ldi	r18, 0x0A	; 10
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e0       	ldi	r20, 0x00	; 0
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 13 1a 	call	0x3426	; 0x3426 <__divmodsi4>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	80 5d       	subi	r24, 0xD0	; 208
    17c2:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <LCD_WriteData8Bit>
		NUM = (NUM / 10);
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ca:	ab 81       	ldd	r26, Y+3	; 0x03
    17cc:	bc 81       	ldd	r27, Y+4	; 0x04
    17ce:	2a e0       	ldi	r18, 0x0A	; 10
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 13 1a 	call	0x3426	; 0x3426 <__divmodsi4>
    17de:	da 01       	movw	r26, r20
    17e0:	c9 01       	movw	r24, r18
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	ab 83       	std	Y+3, r26	; 0x03
    17e8:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	ab 81       	ldd	r26, Y+3	; 0x03
    17f0:	bc 81       	ldd	r27, Y+4	; 0x04
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	91 05       	cpc	r25, r1
    17f6:	a1 05       	cpc	r26, r1
    17f8:	b1 05       	cpc	r27, r1
    17fa:	a1 f6       	brne	.-88     	; 0x17a4 <LCD_WriteNumber8Bit+0x100>
		LCD_WriteData8Bit((NUM % 10) + 48);
		NUM = (NUM / 10);
	}
	Local_enuErrorstate = ES_OK;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	8d 83       	std	Y+5, r24	; 0x05
	return Local_enuErrorstate;
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1802:	29 96       	adiw	r28, 0x09	; 9
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	08 95       	ret

0000181c <LCD_WriteString4Bit>:
/******************************************************************/
ES_t LCD_WriteString4Bit(char *string){
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <LCD_WriteString4Bit+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <LCD_WriteString4Bit+0x8>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    182c:	1a 82       	std	Y+2, r1	; 0x02
	u8 i=0;
    182e:	19 82       	std	Y+1, r1	; 0x01
    1830:	0e c0       	rjmp	.+28     	; 0x184e <LCD_WriteString4Bit+0x32>
	while(string[i] != '\0'){
		LCD_WriteData4Bit(string[i]);
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	fc 01       	movw	r30, r24
    183e:	e2 0f       	add	r30, r18
    1840:	f3 1f       	adc	r31, r19
    1842:	80 81       	ld	r24, Z
    1844:	0e 94 c3 0a 	call	0x1586	; 0x1586 <LCD_WriteData4Bit>
		i++;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	89 83       	std	Y+1, r24	; 0x01
}
/******************************************************************/
ES_t LCD_WriteString4Bit(char *string){
	ES_t Local_enuErrorstate = ES_NOK;
	u8 i=0;
	while(string[i] != '\0'){
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	fc 01       	movw	r30, r24
    185a:	e2 0f       	add	r30, r18
    185c:	f3 1f       	adc	r31, r19
    185e:	80 81       	ld	r24, Z
    1860:	88 23       	and	r24, r24
    1862:	39 f7       	brne	.-50     	; 0x1832 <LCD_WriteString4Bit+0x16>
		LCD_WriteData4Bit(string[i]);
		i++;
	}
	Local_enuErrorstate = ES_OK;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
}
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <LCD_GoToXY4Bit>:

ES_t LCD_GoToXY4Bit(u8 X_Pos,u8 Y_Pos){
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <LCD_GoToXY4Bit+0x6>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <LCD_GoToXY4Bit+0x8>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1888:	1a 82       	std	Y+2, r1	; 0x02
	u8 Address;
	/*	Location at First row	*/
	if(Y_Pos == 0){
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	88 23       	and	r24, r24
    188e:	19 f4       	brne	.+6      	; 0x1896 <LCD_GoToXY4Bit+0x1e>
		Address = X_Pos;
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	06 c0       	rjmp	.+12     	; 0x18a2 <LCD_GoToXY4Bit+0x2a>
	}
	/*	Location at second Row	*/
	else if(Y_Pos == 1){
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	19 f4       	brne	.+6      	; 0x18a2 <LCD_GoToXY4Bit+0x2a>
		Address = X_Pos + 0x40;
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	80 5c       	subi	r24, 0xC0	; 192
    18a0:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_WriteCommand4Bit(128+Address);
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	80 58       	subi	r24, 0x80	; 128
    18a6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
	Local_enuErrorstate = ES_OK;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <LCD_WriteNumber4Bit>:

ES_t LCD_WriteNumber4Bit(s32 Number){
    18be:	ef 92       	push	r14
    18c0:	ff 92       	push	r15
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	29 97       	sbiw	r28, 0x09	; 9
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	6e 83       	std	Y+6, r22	; 0x06
    18dc:	7f 83       	std	Y+7, r23	; 0x07
    18de:	88 87       	std	Y+8, r24	; 0x08
    18e0:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorstate = ES_NOK;
    18e2:	1d 82       	std	Y+5, r1	; 0x05
	s32 NUM = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	9a 83       	std	Y+2, r25	; 0x02
    18f0:	ab 83       	std	Y+3, r26	; 0x03
    18f2:	bc 83       	std	Y+4, r27	; 0x04
	if(Number == 0){
    18f4:	8e 81       	ldd	r24, Y+6	; 0x06
    18f6:	9f 81       	ldd	r25, Y+7	; 0x07
    18f8:	a8 85       	ldd	r26, Y+8	; 0x08
    18fa:	b9 85       	ldd	r27, Y+9	; 0x09
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	a1 05       	cpc	r26, r1
    1900:	b1 05       	cpc	r27, r1
    1902:	21 f4       	brne	.+8      	; 0x190c <LCD_WriteNumber4Bit+0x4e>
		LCD_WriteData4Bit('0');
    1904:	80 e3       	ldi	r24, 0x30	; 48
    1906:	0e 94 c3 0a 	call	0x1586	; 0x1586 <LCD_WriteData4Bit>
    190a:	50 c0       	rjmp	.+160    	; 0x19ac <LCD_WriteNumber4Bit+0xee>
	}
	else if(Number < 0){
    190c:	8e 81       	ldd	r24, Y+6	; 0x06
    190e:	9f 81       	ldd	r25, Y+7	; 0x07
    1910:	a8 85       	ldd	r26, Y+8	; 0x08
    1912:	b9 85       	ldd	r27, Y+9	; 0x09
    1914:	bb 23       	and	r27, r27
    1916:	0c f0       	brlt	.+2      	; 0x191a <LCD_WriteNumber4Bit+0x5c>
    1918:	49 c0       	rjmp	.+146    	; 0x19ac <LCD_WriteNumber4Bit+0xee>
		LCD_WriteData4Bit('-');
    191a:	8d e2       	ldi	r24, 0x2D	; 45
    191c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <LCD_WriteData4Bit>
		Number = Number * (-1);
    1920:	8e 81       	ldd	r24, Y+6	; 0x06
    1922:	9f 81       	ldd	r25, Y+7	; 0x07
    1924:	a8 85       	ldd	r26, Y+8	; 0x08
    1926:	b9 85       	ldd	r27, Y+9	; 0x09
    1928:	b0 95       	com	r27
    192a:	a0 95       	com	r26
    192c:	90 95       	com	r25
    192e:	81 95       	neg	r24
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	af 4f       	sbci	r26, 0xFF	; 255
    1934:	bf 4f       	sbci	r27, 0xFF	; 255
    1936:	8e 83       	std	Y+6, r24	; 0x06
    1938:	9f 83       	std	Y+7, r25	; 0x07
    193a:	a8 87       	std	Y+8, r26	; 0x08
    193c:	b9 87       	std	Y+9, r27	; 0x09
    193e:	36 c0       	rjmp	.+108    	; 0x19ac <LCD_WriteNumber4Bit+0xee>
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	ab 81       	ldd	r26, Y+3	; 0x03
    1946:	bc 81       	ldd	r27, Y+4	; 0x04
    1948:	2a e0       	ldi	r18, 0x0A	; 10
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__mulsi3>
    1958:	7b 01       	movw	r14, r22
    195a:	8c 01       	movw	r16, r24
    195c:	8e 81       	ldd	r24, Y+6	; 0x06
    195e:	9f 81       	ldd	r25, Y+7	; 0x07
    1960:	a8 85       	ldd	r26, Y+8	; 0x08
    1962:	b9 85       	ldd	r27, Y+9	; 0x09
    1964:	2a e0       	ldi	r18, 0x0A	; 10
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	50 e0       	ldi	r21, 0x00	; 0
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 13 1a 	call	0x3426	; 0x3426 <__divmodsi4>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8e 0d       	add	r24, r14
    197a:	9f 1d       	adc	r25, r15
    197c:	a0 1f       	adc	r26, r16
    197e:	b1 1f       	adc	r27, r17
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	ab 83       	std	Y+3, r26	; 0x03
    1986:	bc 83       	std	Y+4, r27	; 0x04
		Number = Number / 10;
    1988:	8e 81       	ldd	r24, Y+6	; 0x06
    198a:	9f 81       	ldd	r25, Y+7	; 0x07
    198c:	a8 85       	ldd	r26, Y+8	; 0x08
    198e:	b9 85       	ldd	r27, Y+9	; 0x09
    1990:	2a e0       	ldi	r18, 0x0A	; 10
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 13 1a 	call	0x3426	; 0x3426 <__divmodsi4>
    19a0:	da 01       	movw	r26, r20
    19a2:	c9 01       	movw	r24, r18
    19a4:	8e 83       	std	Y+6, r24	; 0x06
    19a6:	9f 83       	std	Y+7, r25	; 0x07
    19a8:	a8 87       	std	Y+8, r26	; 0x08
    19aa:	b9 87       	std	Y+9, r27	; 0x09
	}
	else if(Number < 0){
		LCD_WriteData4Bit('-');
		Number = Number * (-1);
	}
	while(Number){
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	9f 81       	ldd	r25, Y+7	; 0x07
    19b0:	a8 85       	ldd	r26, Y+8	; 0x08
    19b2:	b9 85       	ldd	r27, Y+9	; 0x09
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	a1 05       	cpc	r26, r1
    19b8:	b1 05       	cpc	r27, r1
    19ba:	11 f6       	brne	.-124    	; 0x1940 <LCD_WriteNumber4Bit+0x82>
    19bc:	23 c0       	rjmp	.+70     	; 0x1a04 <LCD_WriteNumber4Bit+0x146>
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
		LCD_WriteData4Bit((NUM % 10) + 48);
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	ab 81       	ldd	r26, Y+3	; 0x03
    19c4:	bc 81       	ldd	r27, Y+4	; 0x04
    19c6:	2a e0       	ldi	r18, 0x0A	; 10
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	50 e0       	ldi	r21, 0x00	; 0
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 13 1a 	call	0x3426	; 0x3426 <__divmodsi4>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	80 5d       	subi	r24, 0xD0	; 208
    19dc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <LCD_WriteData4Bit>
		NUM = (NUM / 10);
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	ab 81       	ldd	r26, Y+3	; 0x03
    19e6:	bc 81       	ldd	r27, Y+4	; 0x04
    19e8:	2a e0       	ldi	r18, 0x0A	; 10
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 13 1a 	call	0x3426	; 0x3426 <__divmodsi4>
    19f8:	da 01       	movw	r26, r20
    19fa:	c9 01       	movw	r24, r18
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	ab 83       	std	Y+3, r26	; 0x03
    1a02:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	9a 81       	ldd	r25, Y+2	; 0x02
    1a08:	ab 81       	ldd	r26, Y+3	; 0x03
    1a0a:	bc 81       	ldd	r27, Y+4	; 0x04
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	a1 05       	cpc	r26, r1
    1a12:	b1 05       	cpc	r27, r1
    1a14:	a1 f6       	brne	.-88     	; 0x19be <LCD_WriteNumber4Bit+0x100>
		LCD_WriteData4Bit((NUM % 10) + 48);
		NUM = (NUM / 10);
	}
	Local_enuErrorstate = ES_OK;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	8d 83       	std	Y+5, r24	; 0x05
	return Local_enuErrorstate;
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1a1c:	29 96       	adiw	r28, 0x09	; 9
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	ff 90       	pop	r15
    1a32:	ef 90       	pop	r14
    1a34:	08 95       	ret

00001a36 <LCD_ClearDisplay8Bit>:

ES_t LCD_ClearDisplay8Bit(void){
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1a40:	19 82       	std	Y+1, r1	; 0x01
	LCD_WriteCommand8Bit(1);
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_WriteCommand8Bit>
	Local_enuErrorstate = ES_OK;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <LCD_ClearDisplay4Bit>:
ES_t LCD_ClearDisplay4Bit(void){
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	0f 92       	push	r0
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1a60:	19 82       	std	Y+1, r1	; 0x01
		LCD_WriteCommand4Bit(1);
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
		Local_enuErrorstate = ES_OK;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <SetDirections8Bit>:



/*		LOCAL FUNCTIONS Implementation		*/

static void SetDirections8Bit(void){
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(DATA_PORT_8_BIT,0xff);
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	6f ef       	ldi	r22, 0xFF	; 255
    1a82:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPortDirection>
	DIO_SetPinDirection(CONTROL_PORT,RS_PIN,OUTPUT);
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	66 e0       	ldi	r22, 0x06	; 6
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,E_PIN,OUTPUT);
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	67 e0       	ldi	r22, 0x07	; 7
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
}
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <SetDirections4Bit>:
static void SetDirections4Bit(void){
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(DATA_PORT_8_BIT,0xf);
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	6f e0       	ldi	r22, 0x0F	; 15
    1aac:	0e 94 4c 07 	call	0xe98	; 0xe98 <DIO_SetPortDirection>
	DIO_SetPinDirection(CONTROL_PORT,RS_PIN,OUTPUT);
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	66 e0       	ldi	r22, 0x06	; 6
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,E_PIN,OUTPUT);
    1aba:	83 e0       	ldi	r24, 0x03	; 3
    1abc:	67 e0       	ldi	r22, 0x07	; 7
    1abe:	41 e0       	ldi	r20, 0x01	; 1
    1ac0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
}
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <SendEnablePulse>:


static void SendEnablePulse(void){
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	6c 97       	sbiw	r28, 0x1c	; 28
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(CONTROL_PORT,E_PIN,HIGH);
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	67 e0       	ldi	r22, 0x07	; 7
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e0       	ldi	r26, 0x00	; 0
    1aee:	b0 e4       	ldi	r27, 0x40	; 64
    1af0:	89 8f       	std	Y+25, r24	; 0x19
    1af2:	9a 8f       	std	Y+26, r25	; 0x1a
    1af4:	ab 8f       	std	Y+27, r26	; 0x1b
    1af6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	69 8d       	ldd	r22, Y+25	; 0x19
    1afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a ef       	ldi	r20, 0xFA	; 250
    1b06:	54 e4       	ldi	r21, 0x44	; 68
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8d 8b       	std	Y+21, r24	; 0x15
    1b12:	9e 8b       	std	Y+22, r25	; 0x16
    1b14:	af 8b       	std	Y+23, r26	; 0x17
    1b16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b18:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <SendEnablePulse+0x70>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9c 8b       	std	Y+20, r25	; 0x14
    1b36:	8b 8b       	std	Y+19, r24	; 0x13
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <SendEnablePulse+0xee>
	else if (__tmp > 65535)
    1b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b40:	98 8d       	ldd	r25, Y+24	; 0x18
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	69 8d       	ldd	r22, Y+25	; 0x19
    1b54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9c 8b       	std	Y+20, r25	; 0x14
    1b78:	8b 8b       	std	Y+19, r24	; 0x13
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <SendEnablePulse+0xd0>
    1b7c:	88 ec       	ldi	r24, 0xC8	; 200
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9a 8b       	std	Y+18, r25	; 0x12
    1b82:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b84:	89 89       	ldd	r24, Y+17	; 0x11
    1b86:	9a 89       	ldd	r25, Y+18	; 0x12
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <SendEnablePulse+0xbe>
    1b8c:	9a 8b       	std	Y+18, r25	; 0x12
    1b8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8b 89       	ldd	r24, Y+19	; 0x13
    1b92:	9c 89       	ldd	r25, Y+20	; 0x14
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	9c 8b       	std	Y+20, r25	; 0x14
    1b98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <SendEnablePulse+0xb2>
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    1baa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9c 8b       	std	Y+20, r25	; 0x14
    1bb6:	8b 8b       	std	Y+19, r24	; 0x13
    1bb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bba:	9c 89       	ldd	r25, Y+20	; 0x14
    1bbc:	98 8b       	std	Y+16, r25	; 0x10
    1bbe:	8f 87       	std	Y+15, r24	; 0x0f
    1bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc2:	98 89       	ldd	r25, Y+16	; 0x10
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <SendEnablePulse+0xfa>
    1bc8:	98 8b       	std	Y+16, r25	; 0x10
    1bca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(CONTROL_PORT,E_PIN,LOW);
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	67 e0       	ldi	r22, 0x07	; 7
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 ea       	ldi	r26, 0xA0	; 160
    1bdc:	b0 e4       	ldi	r27, 0x40	; 64
    1bde:	8b 87       	std	Y+11, r24	; 0x0b
    1be0:	9c 87       	std	Y+12, r25	; 0x0c
    1be2:	ad 87       	std	Y+13, r26	; 0x0d
    1be4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a ef       	ldi	r20, 0xFA	; 250
    1bf4:	54 e4       	ldi	r21, 0x44	; 68
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8f 83       	std	Y+7, r24	; 0x07
    1c00:	98 87       	std	Y+8, r25	; 0x08
    1c02:	a9 87       	std	Y+9, r26	; 0x09
    1c04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <SendEnablePulse+0x15e>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9e 83       	std	Y+6, r25	; 0x06
    1c24:	8d 83       	std	Y+5, r24	; 0x05
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <SendEnablePulse+0x1dc>
	else if (__tmp > 65535)
    1c28:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2a:	78 85       	ldd	r23, Y+8	; 0x08
    1c2c:	89 85       	ldd	r24, Y+9	; 0x09
    1c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <SendEnablePulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <SendEnablePulse+0x1be>
    1c6a:	88 ec       	ldi	r24, 0xC8	; 200
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <SendEnablePulse+0x1ac>
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <SendEnablePulse+0x1a0>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <SendEnablePulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6f 81       	ldd	r22, Y+7	; 0x07
    1c94:	78 85       	ldd	r23, Y+8	; 0x08
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <SendEnablePulse+0x1e8>
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1cba:	6c 96       	adiw	r28, 0x1c	; 28
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <FunctionSet8Bit>:
/****************************************************/
static void FunctionSet8Bit(void){
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	2e 97       	sbiw	r28, 0x0e	; 14
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a8 e4       	ldi	r26, 0x48	; 72
    1ce6:	b2 e4       	ldi	r27, 0x42	; 66
    1ce8:	8b 87       	std	Y+11, r24	; 0x0b
    1cea:	9c 87       	std	Y+12, r25	; 0x0c
    1cec:	ad 87       	std	Y+13, r26	; 0x0d
    1cee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a ef       	ldi	r20, 0xFA	; 250
    1cfe:	54 e4       	ldi	r21, 0x44	; 68
    1d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8f 83       	std	Y+7, r24	; 0x07
    1d0a:	98 87       	std	Y+8, r25	; 0x08
    1d0c:	a9 87       	std	Y+9, r26	; 0x09
    1d0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <FunctionSet8Bit+0x66>
		__ticks = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	3f c0       	rjmp	.+126    	; 0x1db0 <FunctionSet8Bit+0xe4>
	else if (__tmp > 65535)
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	3f ef       	ldi	r19, 0xFF	; 255
    1d3e:	4f e7       	ldi	r20, 0x7F	; 127
    1d40:	57 e4       	ldi	r21, 0x47	; 71
    1d42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d46:	18 16       	cp	r1, r24
    1d48:	4c f5       	brge	.+82     	; 0x1d9c <FunctionSet8Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e2       	ldi	r20, 0x20	; 32
    1d58:	51 e4       	ldi	r21, 0x41	; 65
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <FunctionSet8Bit+0xc6>
    1d74:	88 ec       	ldi	r24, 0xC8	; 200
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <FunctionSet8Bit+0xb4>
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	69 f7       	brne	.-38     	; 0x1d74 <FunctionSet8Bit+0xa8>
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <FunctionSet8Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <FunctionSet8Bit+0xf0>
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_WriteCommand8Bit(0x3C);
    1dc4:	8c e3       	ldi	r24, 0x3C	; 60
    1dc6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_WriteCommand8Bit>
}
    1dca:	2e 96       	adiw	r28, 0x0e	; 14
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <DisplayOnOffControl8Bit>:
static void DisplayOnOffControl8Bit(void){
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	68 97       	sbiw	r28, 0x18	; 24
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a8 e4       	ldi	r26, 0x48	; 72
    1df6:	b2 e4       	ldi	r27, 0x42	; 66
    1df8:	8d 8b       	std	Y+21, r24	; 0x15
    1dfa:	9e 8b       	std	Y+22, r25	; 0x16
    1dfc:	af 8b       	std	Y+23, r26	; 0x17
    1dfe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e00:	6d 89       	ldd	r22, Y+21	; 0x15
    1e02:	7e 89       	ldd	r23, Y+22	; 0x16
    1e04:	8f 89       	ldd	r24, Y+23	; 0x17
    1e06:	98 8d       	ldd	r25, Y+24	; 0x18
    1e08:	2b ea       	ldi	r18, 0xAB	; 171
    1e0a:	3a ea       	ldi	r19, 0xAA	; 170
    1e0c:	4a e2       	ldi	r20, 0x2A	; 42
    1e0e:	50 e4       	ldi	r21, 0x40	; 64
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	89 8b       	std	Y+17, r24	; 0x11
    1e1a:	9a 8b       	std	Y+18, r25	; 0x12
    1e1c:	ab 8b       	std	Y+19, r26	; 0x13
    1e1e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e20:	69 89       	ldd	r22, Y+17	; 0x11
    1e22:	7a 89       	ldd	r23, Y+18	; 0x12
    1e24:	8b 89       	ldd	r24, Y+19	; 0x13
    1e26:	9c 89       	ldd	r25, Y+20	; 0x14
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	1c f4       	brge	.+6      	; 0x1e3e <DisplayOnOffControl8Bit+0x62>
		__ticks = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	88 8b       	std	Y+16, r24	; 0x10
    1e3c:	91 c0       	rjmp	.+290    	; 0x1f60 <DisplayOnOffControl8Bit+0x184>
	else if (__tmp > 255)
    1e3e:	69 89       	ldd	r22, Y+17	; 0x11
    1e40:	7a 89       	ldd	r23, Y+18	; 0x12
    1e42:	8b 89       	ldd	r24, Y+19	; 0x13
    1e44:	9c 89       	ldd	r25, Y+20	; 0x14
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	53 e4       	ldi	r21, 0x43	; 67
    1e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	0c f0       	brlt	.+2      	; 0x1e58 <DisplayOnOffControl8Bit+0x7c>
    1e56:	7b c0       	rjmp	.+246    	; 0x1f4e <DisplayOnOffControl8Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    1e58:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a e7       	ldi	r20, 0x7A	; 122
    1e66:	54 e4       	ldi	r21, 0x44	; 68
    1e68:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8c 87       	std	Y+12, r24	; 0x0c
    1e72:	9d 87       	std	Y+13, r25	; 0x0d
    1e74:	ae 87       	std	Y+14, r26	; 0x0e
    1e76:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e7a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a ef       	ldi	r20, 0xFA	; 250
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	88 87       	std	Y+8, r24	; 0x08
    1e92:	99 87       	std	Y+9, r25	; 0x09
    1e94:	aa 87       	std	Y+10, r26	; 0x0a
    1e96:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e98:	68 85       	ldd	r22, Y+8	; 0x08
    1e9a:	79 85       	ldd	r23, Y+9	; 0x09
    1e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <DisplayOnOffControl8Bit+0xde>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9f 83       	std	Y+7, r25	; 0x07
    1eb6:	8e 83       	std	Y+6, r24	; 0x06
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <DisplayOnOffControl8Bit+0x15c>
	else if (__tmp > 65535)
    1eba:	68 85       	ldd	r22, Y+8	; 0x08
    1ebc:	79 85       	ldd	r23, Y+9	; 0x09
    1ebe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <DisplayOnOffControl8Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ed4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ed6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ed8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9f 83       	std	Y+7, r25	; 0x07
    1ef8:	8e 83       	std	Y+6, r24	; 0x06
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <DisplayOnOffControl8Bit+0x13e>
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9d 83       	std	Y+5, r25	; 0x05
    1f02:	8c 83       	std	Y+4, r24	; 0x04
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
    1f06:	9d 81       	ldd	r25, Y+5	; 0x05
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <DisplayOnOffControl8Bit+0x12c>
    1f0c:	9d 83       	std	Y+5, r25	; 0x05
    1f0e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8e 81       	ldd	r24, Y+6	; 0x06
    1f12:	9f 81       	ldd	r25, Y+7	; 0x07
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9f 83       	std	Y+7, r25	; 0x07
    1f18:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <DisplayOnOffControl8Bit+0x120>
    1f22:	24 c0       	rjmp	.+72     	; 0x1f6c <DisplayOnOffControl8Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	68 85       	ldd	r22, Y+8	; 0x08
    1f26:	79 85       	ldd	r23, Y+9	; 0x09
    1f28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9f 83       	std	Y+7, r25	; 0x07
    1f36:	8e 83       	std	Y+6, r24	; 0x06
    1f38:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	9b 81       	ldd	r25, Y+3	; 0x03
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <DisplayOnOffControl8Bit+0x168>
    1f48:	9b 83       	std	Y+3, r25	; 0x03
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <DisplayOnOffControl8Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f4e:	69 89       	ldd	r22, Y+17	; 0x11
    1f50:	7a 89       	ldd	r23, Y+18	; 0x12
    1f52:	8b 89       	ldd	r24, Y+19	; 0x13
    1f54:	9c 89       	ldd	r25, Y+20	; 0x14
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	88 8b       	std	Y+16, r24	; 0x10
    1f60:	88 89       	ldd	r24, Y+16	; 0x10
    1f62:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	8a 95       	dec	r24
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <DisplayOnOffControl8Bit+0x18a>
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	LCD_WriteCommand8Bit(0x0E);
    1f6c:	8e e0       	ldi	r24, 0x0E	; 14
    1f6e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_WriteCommand8Bit>
}
    1f72:	68 96       	adiw	r28, 0x18	; 24
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <DisplayClear8Bit>:
static void DisplayClear8Bit(void){
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	68 97       	sbiw	r28, 0x18	; 24
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	a8 e4       	ldi	r26, 0x48	; 72
    1f9e:	b2 e4       	ldi	r27, 0x42	; 66
    1fa0:	8d 8b       	std	Y+21, r24	; 0x15
    1fa2:	9e 8b       	std	Y+22, r25	; 0x16
    1fa4:	af 8b       	std	Y+23, r26	; 0x17
    1fa6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	7e 89       	ldd	r23, Y+22	; 0x16
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	2b ea       	ldi	r18, 0xAB	; 171
    1fb2:	3a ea       	ldi	r19, 0xAA	; 170
    1fb4:	4a e2       	ldi	r20, 0x2A	; 42
    1fb6:	50 e4       	ldi	r21, 0x40	; 64
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	89 8b       	std	Y+17, r24	; 0x11
    1fc2:	9a 8b       	std	Y+18, r25	; 0x12
    1fc4:	ab 8b       	std	Y+19, r26	; 0x13
    1fc6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fc8:	69 89       	ldd	r22, Y+17	; 0x11
    1fca:	7a 89       	ldd	r23, Y+18	; 0x12
    1fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fce:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	1c f4       	brge	.+6      	; 0x1fe6 <DisplayClear8Bit+0x62>
		__ticks = 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	88 8b       	std	Y+16, r24	; 0x10
    1fe4:	91 c0       	rjmp	.+290    	; 0x2108 <DisplayClear8Bit+0x184>
	else if (__tmp > 255)
    1fe6:	69 89       	ldd	r22, Y+17	; 0x11
    1fe8:	7a 89       	ldd	r23, Y+18	; 0x12
    1fea:	8b 89       	ldd	r24, Y+19	; 0x13
    1fec:	9c 89       	ldd	r25, Y+20	; 0x14
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	53 e4       	ldi	r21, 0x43	; 67
    1ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	0c f0       	brlt	.+2      	; 0x2000 <DisplayClear8Bit+0x7c>
    1ffe:	7b c0       	rjmp	.+246    	; 0x20f6 <DisplayClear8Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    2000:	6d 89       	ldd	r22, Y+21	; 0x15
    2002:	7e 89       	ldd	r23, Y+22	; 0x16
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	54 e4       	ldi	r21, 0x44	; 68
    2010:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8c 87       	std	Y+12, r24	; 0x0c
    201a:	9d 87       	std	Y+13, r25	; 0x0d
    201c:	ae 87       	std	Y+14, r26	; 0x0e
    201e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	6c 85       	ldd	r22, Y+12	; 0x0c
    2022:	7d 85       	ldd	r23, Y+13	; 0x0d
    2024:	8e 85       	ldd	r24, Y+14	; 0x0e
    2026:	9f 85       	ldd	r25, Y+15	; 0x0f
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a ef       	ldi	r20, 0xFA	; 250
    202e:	54 e4       	ldi	r21, 0x44	; 68
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	88 87       	std	Y+8, r24	; 0x08
    203a:	99 87       	std	Y+9, r25	; 0x09
    203c:	aa 87       	std	Y+10, r26	; 0x0a
    203e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2040:	68 85       	ldd	r22, Y+8	; 0x08
    2042:	79 85       	ldd	r23, Y+9	; 0x09
    2044:	8a 85       	ldd	r24, Y+10	; 0x0a
    2046:	9b 85       	ldd	r25, Y+11	; 0x0b
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	2c f4       	brge	.+10     	; 0x2062 <DisplayClear8Bit+0xde>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9f 83       	std	Y+7, r25	; 0x07
    205e:	8e 83       	std	Y+6, r24	; 0x06
    2060:	3f c0       	rjmp	.+126    	; 0x20e0 <DisplayClear8Bit+0x15c>
	else if (__tmp > 65535)
    2062:	68 85       	ldd	r22, Y+8	; 0x08
    2064:	79 85       	ldd	r23, Y+9	; 0x09
    2066:	8a 85       	ldd	r24, Y+10	; 0x0a
    2068:	9b 85       	ldd	r25, Y+11	; 0x0b
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	4c f5       	brge	.+82     	; 0x20cc <DisplayClear8Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	6c 85       	ldd	r22, Y+12	; 0x0c
    207c:	7d 85       	ldd	r23, Y+13	; 0x0d
    207e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2080:	9f 85       	ldd	r25, Y+15	; 0x0f
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9f 83       	std	Y+7, r25	; 0x07
    20a0:	8e 83       	std	Y+6, r24	; 0x06
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <DisplayClear8Bit+0x13e>
    20a4:	88 ec       	ldi	r24, 0xC8	; 200
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9d 83       	std	Y+5, r25	; 0x05
    20aa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <DisplayClear8Bit+0x12c>
    20b4:	9d 83       	std	Y+5, r25	; 0x05
    20b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	8e 81       	ldd	r24, Y+6	; 0x06
    20ba:	9f 81       	ldd	r25, Y+7	; 0x07
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9f 83       	std	Y+7, r25	; 0x07
    20c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	8e 81       	ldd	r24, Y+6	; 0x06
    20c4:	9f 81       	ldd	r25, Y+7	; 0x07
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <DisplayClear8Bit+0x120>
    20ca:	24 c0       	rjmp	.+72     	; 0x2114 <DisplayClear8Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	68 85       	ldd	r22, Y+8	; 0x08
    20ce:	79 85       	ldd	r23, Y+9	; 0x09
    20d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9f 83       	std	Y+7, r25	; 0x07
    20de:	8e 83       	std	Y+6, r24	; 0x06
    20e0:	8e 81       	ldd	r24, Y+6	; 0x06
    20e2:	9f 81       	ldd	r25, Y+7	; 0x07
    20e4:	9b 83       	std	Y+3, r25	; 0x03
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <DisplayClear8Bit+0x168>
    20f0:	9b 83       	std	Y+3, r25	; 0x03
    20f2:	8a 83       	std	Y+2, r24	; 0x02
    20f4:	0f c0       	rjmp	.+30     	; 0x2114 <DisplayClear8Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20f6:	69 89       	ldd	r22, Y+17	; 0x11
    20f8:	7a 89       	ldd	r23, Y+18	; 0x12
    20fa:	8b 89       	ldd	r24, Y+19	; 0x13
    20fc:	9c 89       	ldd	r25, Y+20	; 0x14
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	88 8b       	std	Y+16, r24	; 0x10
    2108:	88 89       	ldd	r24, Y+16	; 0x10
    210a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	8a 95       	dec	r24
    2110:	f1 f7       	brne	.-4      	; 0x210e <DisplayClear8Bit+0x18a>
    2112:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	LCD_WriteCommand8Bit(0x01);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_WriteCommand8Bit>
}
    211a:	68 96       	adiw	r28, 0x18	; 24
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <EntryModeSet8Bit>:
static void EntryModeSet8Bit(void){
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	2e 97       	sbiw	r28, 0x0e	; 14
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 e0       	ldi	r26, 0x00	; 0
    2146:	b0 e4       	ldi	r27, 0x40	; 64
    2148:	8b 87       	std	Y+11, r24	; 0x0b
    214a:	9c 87       	std	Y+12, r25	; 0x0c
    214c:	ad 87       	std	Y+13, r26	; 0x0d
    214e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2150:	6b 85       	ldd	r22, Y+11	; 0x0b
    2152:	7c 85       	ldd	r23, Y+12	; 0x0c
    2154:	8d 85       	ldd	r24, Y+13	; 0x0d
    2156:	9e 85       	ldd	r25, Y+14	; 0x0e
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a ef       	ldi	r20, 0xFA	; 250
    215e:	54 e4       	ldi	r21, 0x44	; 68
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	8f 83       	std	Y+7, r24	; 0x07
    216a:	98 87       	std	Y+8, r25	; 0x08
    216c:	a9 87       	std	Y+9, r26	; 0x09
    216e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2170:	6f 81       	ldd	r22, Y+7	; 0x07
    2172:	78 85       	ldd	r23, Y+8	; 0x08
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e8       	ldi	r20, 0x80	; 128
    217e:	5f e3       	ldi	r21, 0x3F	; 63
    2180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2184:	88 23       	and	r24, r24
    2186:	2c f4       	brge	.+10     	; 0x2192 <EntryModeSet8Bit+0x66>
		__ticks = 1;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	3f c0       	rjmp	.+126    	; 0x2210 <EntryModeSet8Bit+0xe4>
	else if (__tmp > 65535)
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	3f ef       	ldi	r19, 0xFF	; 255
    219e:	4f e7       	ldi	r20, 0x7F	; 127
    21a0:	57 e4       	ldi	r21, 0x47	; 71
    21a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a6:	18 16       	cp	r1, r24
    21a8:	4c f5       	brge	.+82     	; 0x21fc <EntryModeSet8Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e2       	ldi	r20, 0x20	; 32
    21b8:	51 e4       	ldi	r21, 0x41	; 65
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	bc 01       	movw	r22, r24
    21c4:	cd 01       	movw	r24, r26
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	0f c0       	rjmp	.+30     	; 0x21f2 <EntryModeSet8Bit+0xc6>
    21d4:	88 ec       	ldi	r24, 0xC8	; 200
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9c 83       	std	Y+4, r25	; 0x04
    21da:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <EntryModeSet8Bit+0xb4>
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	69 f7       	brne	.-38     	; 0x21d4 <EntryModeSet8Bit+0xa8>
    21fa:	14 c0       	rjmp	.+40     	; 0x2224 <EntryModeSet8Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fc:	6f 81       	ldd	r22, Y+7	; 0x07
    21fe:	78 85       	ldd	r23, Y+8	; 0x08
    2200:	89 85       	ldd	r24, Y+9	; 0x09
    2202:	9a 85       	ldd	r25, Y+10	; 0x0a
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9e 83       	std	Y+6, r25	; 0x06
    220e:	8d 83       	std	Y+5, r24	; 0x05
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	9a 83       	std	Y+2, r25	; 0x02
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <EntryModeSet8Bit+0xf0>
    2220:	9a 83       	std	Y+2, r25	; 0x02
    2222:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand8Bit(0x06);
    2224:	86 e0       	ldi	r24, 0x06	; 6
    2226:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_WriteCommand8Bit>
}
    222a:	2e 96       	adiw	r28, 0x0e	; 14
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <FunctionSet4Bit>:
/*****************************************************/
static void FunctionSet4Bit(void){
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	a6 97       	sbiw	r28, 0x26	; 38
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a8 e4       	ldi	r26, 0x48	; 72
    2256:	b2 e4       	ldi	r27, 0x42	; 66
    2258:	8b a3       	std	Y+35, r24	; 0x23
    225a:	9c a3       	std	Y+36, r25	; 0x24
    225c:	ad a3       	std	Y+37, r26	; 0x25
    225e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2260:	6b a1       	ldd	r22, Y+35	; 0x23
    2262:	7c a1       	ldd	r23, Y+36	; 0x24
    2264:	8d a1       	ldd	r24, Y+37	; 0x25
    2266:	9e a1       	ldd	r25, Y+38	; 0x26
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a ef       	ldi	r20, 0xFA	; 250
    226e:	54 e4       	ldi	r21, 0x44	; 68
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8f 8f       	std	Y+31, r24	; 0x1f
    227a:	98 a3       	std	Y+32, r25	; 0x20
    227c:	a9 a3       	std	Y+33, r26	; 0x21
    227e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2280:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2282:	78 a1       	ldd	r23, Y+32	; 0x20
    2284:	89 a1       	ldd	r24, Y+33	; 0x21
    2286:	9a a1       	ldd	r25, Y+34	; 0x22
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2294:	88 23       	and	r24, r24
    2296:	2c f4       	brge	.+10     	; 0x22a2 <FunctionSet4Bit+0x66>
		__ticks = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9e 8f       	std	Y+30, r25	; 0x1e
    229e:	8d 8f       	std	Y+29, r24	; 0x1d
    22a0:	3f c0       	rjmp	.+126    	; 0x2320 <FunctionSet4Bit+0xe4>
	else if (__tmp > 65535)
    22a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22a4:	78 a1       	ldd	r23, Y+32	; 0x20
    22a6:	89 a1       	ldd	r24, Y+33	; 0x21
    22a8:	9a a1       	ldd	r25, Y+34	; 0x22
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b6:	18 16       	cp	r1, r24
    22b8:	4c f5       	brge	.+82     	; 0x230c <FunctionSet4Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ba:	6b a1       	ldd	r22, Y+35	; 0x23
    22bc:	7c a1       	ldd	r23, Y+36	; 0x24
    22be:	8d a1       	ldd	r24, Y+37	; 0x25
    22c0:	9e a1       	ldd	r25, Y+38	; 0x26
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e2       	ldi	r20, 0x20	; 32
    22c8:	51 e4       	ldi	r21, 0x41	; 65
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9e 8f       	std	Y+30, r25	; 0x1e
    22e0:	8d 8f       	std	Y+29, r24	; 0x1d
    22e2:	0f c0       	rjmp	.+30     	; 0x2302 <FunctionSet4Bit+0xc6>
    22e4:	88 ec       	ldi	r24, 0xC8	; 200
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9c 8f       	std	Y+28, r25	; 0x1c
    22ea:	8b 8f       	std	Y+27, r24	; 0x1b
    22ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <FunctionSet4Bit+0xb4>
    22f4:	9c 8f       	std	Y+28, r25	; 0x1c
    22f6:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2300:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2304:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	69 f7       	brne	.-38     	; 0x22e4 <FunctionSet4Bit+0xa8>
    230a:	14 c0       	rjmp	.+40     	; 0x2334 <FunctionSet4Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    230e:	78 a1       	ldd	r23, Y+32	; 0x20
    2310:	89 a1       	ldd	r24, Y+33	; 0x21
    2312:	9a a1       	ldd	r25, Y+34	; 0x22
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9e 8f       	std	Y+30, r25	; 0x1e
    231e:	8d 8f       	std	Y+29, r24	; 0x1d
    2320:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2322:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2324:	9a 8f       	std	Y+26, r25	; 0x1a
    2326:	89 8f       	std	Y+25, r24	; 0x19
    2328:	89 8d       	ldd	r24, Y+25	; 0x19
    232a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <FunctionSet4Bit+0xf0>
    2330:	9a 8f       	std	Y+26, r25	; 0x1a
    2332:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(50);
	LCD_WriteCommand4Bit(0x2);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a0 e2       	ldi	r26, 0x20	; 32
    2340:	b1 e4       	ldi	r27, 0x41	; 65
    2342:	8d 8b       	std	Y+21, r24	; 0x15
    2344:	9e 8b       	std	Y+22, r25	; 0x16
    2346:	af 8b       	std	Y+23, r26	; 0x17
    2348:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    234a:	6d 89       	ldd	r22, Y+21	; 0x15
    234c:	7e 89       	ldd	r23, Y+22	; 0x16
    234e:	8f 89       	ldd	r24, Y+23	; 0x17
    2350:	98 8d       	ldd	r25, Y+24	; 0x18
    2352:	2b ea       	ldi	r18, 0xAB	; 171
    2354:	3a ea       	ldi	r19, 0xAA	; 170
    2356:	4a e2       	ldi	r20, 0x2A	; 42
    2358:	50 e4       	ldi	r21, 0x40	; 64
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	89 8b       	std	Y+17, r24	; 0x11
    2364:	9a 8b       	std	Y+18, r25	; 0x12
    2366:	ab 8b       	std	Y+19, r26	; 0x13
    2368:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    236a:	69 89       	ldd	r22, Y+17	; 0x11
    236c:	7a 89       	ldd	r23, Y+18	; 0x12
    236e:	8b 89       	ldd	r24, Y+19	; 0x13
    2370:	9c 89       	ldd	r25, Y+20	; 0x14
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    237e:	88 23       	and	r24, r24
    2380:	1c f4       	brge	.+6      	; 0x2388 <FunctionSet4Bit+0x14c>
		__ticks = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	88 8b       	std	Y+16, r24	; 0x10
    2386:	91 c0       	rjmp	.+290    	; 0x24aa <FunctionSet4Bit+0x26e>
	else if (__tmp > 255)
    2388:	69 89       	ldd	r22, Y+17	; 0x11
    238a:	7a 89       	ldd	r23, Y+18	; 0x12
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	4f e7       	ldi	r20, 0x7F	; 127
    2396:	53 e4       	ldi	r21, 0x43	; 67
    2398:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    239c:	18 16       	cp	r1, r24
    239e:	0c f0       	brlt	.+2      	; 0x23a2 <FunctionSet4Bit+0x166>
    23a0:	7b c0       	rjmp	.+246    	; 0x2498 <FunctionSet4Bit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    23a2:	6d 89       	ldd	r22, Y+21	; 0x15
    23a4:	7e 89       	ldd	r23, Y+22	; 0x16
    23a6:	8f 89       	ldd	r24, Y+23	; 0x17
    23a8:	98 8d       	ldd	r25, Y+24	; 0x18
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a e7       	ldi	r20, 0x7A	; 122
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8c 87       	std	Y+12, r24	; 0x0c
    23bc:	9d 87       	std	Y+13, r25	; 0x0d
    23be:	ae 87       	std	Y+14, r26	; 0x0e
    23c0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    23c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    23c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    23c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	4a ef       	ldi	r20, 0xFA	; 250
    23d0:	54 e4       	ldi	r21, 0x44	; 68
    23d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	88 87       	std	Y+8, r24	; 0x08
    23dc:	99 87       	std	Y+9, r25	; 0x09
    23de:	aa 87       	std	Y+10, r26	; 0x0a
    23e0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23e2:	68 85       	ldd	r22, Y+8	; 0x08
    23e4:	79 85       	ldd	r23, Y+9	; 0x09
    23e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e8       	ldi	r20, 0x80	; 128
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f6:	88 23       	and	r24, r24
    23f8:	2c f4       	brge	.+10     	; 0x2404 <FunctionSet4Bit+0x1c8>
		__ticks = 1;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9f 83       	std	Y+7, r25	; 0x07
    2400:	8e 83       	std	Y+6, r24	; 0x06
    2402:	3f c0       	rjmp	.+126    	; 0x2482 <FunctionSet4Bit+0x246>
	else if (__tmp > 65535)
    2404:	68 85       	ldd	r22, Y+8	; 0x08
    2406:	79 85       	ldd	r23, Y+9	; 0x09
    2408:	8a 85       	ldd	r24, Y+10	; 0x0a
    240a:	9b 85       	ldd	r25, Y+11	; 0x0b
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	3f ef       	ldi	r19, 0xFF	; 255
    2410:	4f e7       	ldi	r20, 0x7F	; 127
    2412:	57 e4       	ldi	r21, 0x47	; 71
    2414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2418:	18 16       	cp	r1, r24
    241a:	4c f5       	brge	.+82     	; 0x246e <FunctionSet4Bit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241c:	6c 85       	ldd	r22, Y+12	; 0x0c
    241e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2420:	8e 85       	ldd	r24, Y+14	; 0x0e
    2422:	9f 85       	ldd	r25, Y+15	; 0x0f
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e2       	ldi	r20, 0x20	; 32
    242a:	51 e4       	ldi	r21, 0x41	; 65
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9f 83       	std	Y+7, r25	; 0x07
    2442:	8e 83       	std	Y+6, r24	; 0x06
    2444:	0f c0       	rjmp	.+30     	; 0x2464 <FunctionSet4Bit+0x228>
    2446:	88 ec       	ldi	r24, 0xC8	; 200
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9d 83       	std	Y+5, r25	; 0x05
    244c:	8c 83       	std	Y+4, r24	; 0x04
    244e:	8c 81       	ldd	r24, Y+4	; 0x04
    2450:	9d 81       	ldd	r25, Y+5	; 0x05
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <FunctionSet4Bit+0x216>
    2456:	9d 83       	std	Y+5, r25	; 0x05
    2458:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245a:	8e 81       	ldd	r24, Y+6	; 0x06
    245c:	9f 81       	ldd	r25, Y+7	; 0x07
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	9f 83       	std	Y+7, r25	; 0x07
    2462:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2464:	8e 81       	ldd	r24, Y+6	; 0x06
    2466:	9f 81       	ldd	r25, Y+7	; 0x07
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	69 f7       	brne	.-38     	; 0x2446 <FunctionSet4Bit+0x20a>
    246c:	24 c0       	rjmp	.+72     	; 0x24b6 <FunctionSet4Bit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246e:	68 85       	ldd	r22, Y+8	; 0x08
    2470:	79 85       	ldd	r23, Y+9	; 0x09
    2472:	8a 85       	ldd	r24, Y+10	; 0x0a
    2474:	9b 85       	ldd	r25, Y+11	; 0x0b
    2476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	9f 83       	std	Y+7, r25	; 0x07
    2480:	8e 83       	std	Y+6, r24	; 0x06
    2482:	8e 81       	ldd	r24, Y+6	; 0x06
    2484:	9f 81       	ldd	r25, Y+7	; 0x07
    2486:	9b 83       	std	Y+3, r25	; 0x03
    2488:	8a 83       	std	Y+2, r24	; 0x02
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	9b 81       	ldd	r25, Y+3	; 0x03
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <FunctionSet4Bit+0x252>
    2492:	9b 83       	std	Y+3, r25	; 0x03
    2494:	8a 83       	std	Y+2, r24	; 0x02
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <FunctionSet4Bit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2498:	69 89       	ldd	r22, Y+17	; 0x11
    249a:	7a 89       	ldd	r23, Y+18	; 0x12
    249c:	8b 89       	ldd	r24, Y+19	; 0x13
    249e:	9c 89       	ldd	r25, Y+20	; 0x14
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	88 8b       	std	Y+16, r24	; 0x10
    24aa:	88 89       	ldd	r24, Y+16	; 0x10
    24ac:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	8a 95       	dec	r24
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <FunctionSet4Bit+0x274>
    24b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x28);
    24b6:	88 e2       	ldi	r24, 0x28	; 40
    24b8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
}
    24bc:	a6 96       	adiw	r28, 0x26	; 38
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <DisplayOnOffControl4Bit>:
static void DisplayOnOffControl4Bit(void){
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	e0 97       	sbiw	r28, 0x30	; 48
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a8 e4       	ldi	r26, 0x48	; 72
    24e8:	b2 e4       	ldi	r27, 0x42	; 66
    24ea:	8d a7       	std	Y+45, r24	; 0x2d
    24ec:	9e a7       	std	Y+46, r25	; 0x2e
    24ee:	af a7       	std	Y+47, r26	; 0x2f
    24f0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    24f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    24f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f8:	98 a9       	ldd	r25, Y+48	; 0x30
    24fa:	2b ea       	ldi	r18, 0xAB	; 171
    24fc:	3a ea       	ldi	r19, 0xAA	; 170
    24fe:	4a e2       	ldi	r20, 0x2A	; 42
    2500:	50 e4       	ldi	r21, 0x40	; 64
    2502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	89 a7       	std	Y+41, r24	; 0x29
    250c:	9a a7       	std	Y+42, r25	; 0x2a
    250e:	ab a7       	std	Y+43, r26	; 0x2b
    2510:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2512:	69 a5       	ldd	r22, Y+41	; 0x29
    2514:	7a a5       	ldd	r23, Y+42	; 0x2a
    2516:	8b a5       	ldd	r24, Y+43	; 0x2b
    2518:	9c a5       	ldd	r25, Y+44	; 0x2c
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e8       	ldi	r20, 0x80	; 128
    2520:	5f e3       	ldi	r21, 0x3F	; 63
    2522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2526:	88 23       	and	r24, r24
    2528:	1c f4       	brge	.+6      	; 0x2530 <DisplayOnOffControl4Bit+0x62>
		__ticks = 1;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	88 a7       	std	Y+40, r24	; 0x28
    252e:	91 c0       	rjmp	.+290    	; 0x2652 <DisplayOnOffControl4Bit+0x184>
	else if (__tmp > 255)
    2530:	69 a5       	ldd	r22, Y+41	; 0x29
    2532:	7a a5       	ldd	r23, Y+42	; 0x2a
    2534:	8b a5       	ldd	r24, Y+43	; 0x2b
    2536:	9c a5       	ldd	r25, Y+44	; 0x2c
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	53 e4       	ldi	r21, 0x43	; 67
    2540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	0c f0       	brlt	.+2      	; 0x254a <DisplayOnOffControl4Bit+0x7c>
    2548:	7b c0       	rjmp	.+246    	; 0x2640 <DisplayOnOffControl4Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    254a:	6d a5       	ldd	r22, Y+45	; 0x2d
    254c:	7e a5       	ldd	r23, Y+46	; 0x2e
    254e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2550:	98 a9       	ldd	r25, Y+48	; 0x30
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a e7       	ldi	r20, 0x7A	; 122
    2558:	54 e4       	ldi	r21, 0x44	; 68
    255a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	8c a3       	std	Y+36, r24	; 0x24
    2564:	9d a3       	std	Y+37, r25	; 0x25
    2566:	ae a3       	std	Y+38, r26	; 0x26
    2568:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256a:	6c a1       	ldd	r22, Y+36	; 0x24
    256c:	7d a1       	ldd	r23, Y+37	; 0x25
    256e:	8e a1       	ldd	r24, Y+38	; 0x26
    2570:	9f a1       	ldd	r25, Y+39	; 0x27
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	4a ef       	ldi	r20, 0xFA	; 250
    2578:	54 e4       	ldi	r21, 0x44	; 68
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	88 a3       	std	Y+32, r24	; 0x20
    2584:	99 a3       	std	Y+33, r25	; 0x21
    2586:	aa a3       	std	Y+34, r26	; 0x22
    2588:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    258a:	68 a1       	ldd	r22, Y+32	; 0x20
    258c:	79 a1       	ldd	r23, Y+33	; 0x21
    258e:	8a a1       	ldd	r24, Y+34	; 0x22
    2590:	9b a1       	ldd	r25, Y+35	; 0x23
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e8       	ldi	r20, 0x80	; 128
    2598:	5f e3       	ldi	r21, 0x3F	; 63
    259a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    259e:	88 23       	and	r24, r24
    25a0:	2c f4       	brge	.+10     	; 0x25ac <DisplayOnOffControl4Bit+0xde>
		__ticks = 1;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9f 8f       	std	Y+31, r25	; 0x1f
    25a8:	8e 8f       	std	Y+30, r24	; 0x1e
    25aa:	3f c0       	rjmp	.+126    	; 0x262a <DisplayOnOffControl4Bit+0x15c>
	else if (__tmp > 65535)
    25ac:	68 a1       	ldd	r22, Y+32	; 0x20
    25ae:	79 a1       	ldd	r23, Y+33	; 0x21
    25b0:	8a a1       	ldd	r24, Y+34	; 0x22
    25b2:	9b a1       	ldd	r25, Y+35	; 0x23
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	3f ef       	ldi	r19, 0xFF	; 255
    25b8:	4f e7       	ldi	r20, 0x7F	; 127
    25ba:	57 e4       	ldi	r21, 0x47	; 71
    25bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c0:	18 16       	cp	r1, r24
    25c2:	4c f5       	brge	.+82     	; 0x2616 <DisplayOnOffControl4Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c4:	6c a1       	ldd	r22, Y+36	; 0x24
    25c6:	7d a1       	ldd	r23, Y+37	; 0x25
    25c8:	8e a1       	ldd	r24, Y+38	; 0x26
    25ca:	9f a1       	ldd	r25, Y+39	; 0x27
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e2       	ldi	r20, 0x20	; 32
    25d2:	51 e4       	ldi	r21, 0x41	; 65
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9f 8f       	std	Y+31, r25	; 0x1f
    25ea:	8e 8f       	std	Y+30, r24	; 0x1e
    25ec:	0f c0       	rjmp	.+30     	; 0x260c <DisplayOnOffControl4Bit+0x13e>
    25ee:	88 ec       	ldi	r24, 0xC8	; 200
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9d 8f       	std	Y+29, r25	; 0x1d
    25f4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <DisplayOnOffControl4Bit+0x12c>
    25fe:	9d 8f       	std	Y+29, r25	; 0x1d
    2600:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2602:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2604:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	9f 8f       	std	Y+31, r25	; 0x1f
    260a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    260e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	69 f7       	brne	.-38     	; 0x25ee <DisplayOnOffControl4Bit+0x120>
    2614:	24 c0       	rjmp	.+72     	; 0x265e <DisplayOnOffControl4Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2616:	68 a1       	ldd	r22, Y+32	; 0x20
    2618:	79 a1       	ldd	r23, Y+33	; 0x21
    261a:	8a a1       	ldd	r24, Y+34	; 0x22
    261c:	9b a1       	ldd	r25, Y+35	; 0x23
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	9f 8f       	std	Y+31, r25	; 0x1f
    2628:	8e 8f       	std	Y+30, r24	; 0x1e
    262a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    262c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    262e:	9b 8f       	std	Y+27, r25	; 0x1b
    2630:	8a 8f       	std	Y+26, r24	; 0x1a
    2632:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2634:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <DisplayOnOffControl4Bit+0x168>
    263a:	9b 8f       	std	Y+27, r25	; 0x1b
    263c:	8a 8f       	std	Y+26, r24	; 0x1a
    263e:	0f c0       	rjmp	.+30     	; 0x265e <DisplayOnOffControl4Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2640:	69 a5       	ldd	r22, Y+41	; 0x29
    2642:	7a a5       	ldd	r23, Y+42	; 0x2a
    2644:	8b a5       	ldd	r24, Y+43	; 0x2b
    2646:	9c a5       	ldd	r25, Y+44	; 0x2c
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	88 a7       	std	Y+40, r24	; 0x28
    2652:	88 a5       	ldd	r24, Y+40	; 0x28
    2654:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2656:	89 8d       	ldd	r24, Y+25	; 0x19
    2658:	8a 95       	dec	r24
    265a:	f1 f7       	brne	.-4      	; 0x2658 <DisplayOnOffControl4Bit+0x18a>
    265c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_WriteCommand4Bit(0x0);
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	a0 e2       	ldi	r26, 0x20	; 32
    266a:	b1 e4       	ldi	r27, 0x41	; 65
    266c:	8d 8b       	std	Y+21, r24	; 0x15
    266e:	9e 8b       	std	Y+22, r25	; 0x16
    2670:	af 8b       	std	Y+23, r26	; 0x17
    2672:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2674:	6d 89       	ldd	r22, Y+21	; 0x15
    2676:	7e 89       	ldd	r23, Y+22	; 0x16
    2678:	8f 89       	ldd	r24, Y+23	; 0x17
    267a:	98 8d       	ldd	r25, Y+24	; 0x18
    267c:	2b ea       	ldi	r18, 0xAB	; 171
    267e:	3a ea       	ldi	r19, 0xAA	; 170
    2680:	4a e2       	ldi	r20, 0x2A	; 42
    2682:	50 e4       	ldi	r21, 0x40	; 64
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	89 8b       	std	Y+17, r24	; 0x11
    268e:	9a 8b       	std	Y+18, r25	; 0x12
    2690:	ab 8b       	std	Y+19, r26	; 0x13
    2692:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2694:	69 89       	ldd	r22, Y+17	; 0x11
    2696:	7a 89       	ldd	r23, Y+18	; 0x12
    2698:	8b 89       	ldd	r24, Y+19	; 0x13
    269a:	9c 89       	ldd	r25, Y+20	; 0x14
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e8       	ldi	r20, 0x80	; 128
    26a2:	5f e3       	ldi	r21, 0x3F	; 63
    26a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26a8:	88 23       	and	r24, r24
    26aa:	1c f4       	brge	.+6      	; 0x26b2 <DisplayOnOffControl4Bit+0x1e4>
		__ticks = 1;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	88 8b       	std	Y+16, r24	; 0x10
    26b0:	91 c0       	rjmp	.+290    	; 0x27d4 <DisplayOnOffControl4Bit+0x306>
	else if (__tmp > 255)
    26b2:	69 89       	ldd	r22, Y+17	; 0x11
    26b4:	7a 89       	ldd	r23, Y+18	; 0x12
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	53 e4       	ldi	r21, 0x43	; 67
    26c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	0c f0       	brlt	.+2      	; 0x26cc <DisplayOnOffControl4Bit+0x1fe>
    26ca:	7b c0       	rjmp	.+246    	; 0x27c2 <DisplayOnOffControl4Bit+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    26cc:	6d 89       	ldd	r22, Y+21	; 0x15
    26ce:	7e 89       	ldd	r23, Y+22	; 0x16
    26d0:	8f 89       	ldd	r24, Y+23	; 0x17
    26d2:	98 8d       	ldd	r25, Y+24	; 0x18
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	4a e7       	ldi	r20, 0x7A	; 122
    26da:	54 e4       	ldi	r21, 0x44	; 68
    26dc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	8c 87       	std	Y+12, r24	; 0x0c
    26e6:	9d 87       	std	Y+13, r25	; 0x0d
    26e8:	ae 87       	std	Y+14, r26	; 0x0e
    26ea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    26ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    26f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    26f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a ef       	ldi	r20, 0xFA	; 250
    26fa:	54 e4       	ldi	r21, 0x44	; 68
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	88 87       	std	Y+8, r24	; 0x08
    2706:	99 87       	std	Y+9, r25	; 0x09
    2708:	aa 87       	std	Y+10, r26	; 0x0a
    270a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    270c:	68 85       	ldd	r22, Y+8	; 0x08
    270e:	79 85       	ldd	r23, Y+9	; 0x09
    2710:	8a 85       	ldd	r24, Y+10	; 0x0a
    2712:	9b 85       	ldd	r25, Y+11	; 0x0b
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e8       	ldi	r20, 0x80	; 128
    271a:	5f e3       	ldi	r21, 0x3F	; 63
    271c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2720:	88 23       	and	r24, r24
    2722:	2c f4       	brge	.+10     	; 0x272e <DisplayOnOffControl4Bit+0x260>
		__ticks = 1;
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9f 83       	std	Y+7, r25	; 0x07
    272a:	8e 83       	std	Y+6, r24	; 0x06
    272c:	3f c0       	rjmp	.+126    	; 0x27ac <DisplayOnOffControl4Bit+0x2de>
	else if (__tmp > 65535)
    272e:	68 85       	ldd	r22, Y+8	; 0x08
    2730:	79 85       	ldd	r23, Y+9	; 0x09
    2732:	8a 85       	ldd	r24, Y+10	; 0x0a
    2734:	9b 85       	ldd	r25, Y+11	; 0x0b
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	3f ef       	ldi	r19, 0xFF	; 255
    273a:	4f e7       	ldi	r20, 0x7F	; 127
    273c:	57 e4       	ldi	r21, 0x47	; 71
    273e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2742:	18 16       	cp	r1, r24
    2744:	4c f5       	brge	.+82     	; 0x2798 <DisplayOnOffControl4Bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2746:	6c 85       	ldd	r22, Y+12	; 0x0c
    2748:	7d 85       	ldd	r23, Y+13	; 0x0d
    274a:	8e 85       	ldd	r24, Y+14	; 0x0e
    274c:	9f 85       	ldd	r25, Y+15	; 0x0f
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e2       	ldi	r20, 0x20	; 32
    2754:	51 e4       	ldi	r21, 0x41	; 65
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9f 83       	std	Y+7, r25	; 0x07
    276c:	8e 83       	std	Y+6, r24	; 0x06
    276e:	0f c0       	rjmp	.+30     	; 0x278e <DisplayOnOffControl4Bit+0x2c0>
    2770:	88 ec       	ldi	r24, 0xC8	; 200
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9d 83       	std	Y+5, r25	; 0x05
    2776:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2778:	8c 81       	ldd	r24, Y+4	; 0x04
    277a:	9d 81       	ldd	r25, Y+5	; 0x05
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <DisplayOnOffControl4Bit+0x2ae>
    2780:	9d 83       	std	Y+5, r25	; 0x05
    2782:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2784:	8e 81       	ldd	r24, Y+6	; 0x06
    2786:	9f 81       	ldd	r25, Y+7	; 0x07
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	9f 83       	std	Y+7, r25	; 0x07
    278c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	8e 81       	ldd	r24, Y+6	; 0x06
    2790:	9f 81       	ldd	r25, Y+7	; 0x07
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	69 f7       	brne	.-38     	; 0x2770 <DisplayOnOffControl4Bit+0x2a2>
    2796:	24 c0       	rjmp	.+72     	; 0x27e0 <DisplayOnOffControl4Bit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2798:	68 85       	ldd	r22, Y+8	; 0x08
    279a:	79 85       	ldd	r23, Y+9	; 0x09
    279c:	8a 85       	ldd	r24, Y+10	; 0x0a
    279e:	9b 85       	ldd	r25, Y+11	; 0x0b
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9f 83       	std	Y+7, r25	; 0x07
    27aa:	8e 83       	std	Y+6, r24	; 0x06
    27ac:	8e 81       	ldd	r24, Y+6	; 0x06
    27ae:	9f 81       	ldd	r25, Y+7	; 0x07
    27b0:	9b 83       	std	Y+3, r25	; 0x03
    27b2:	8a 83       	std	Y+2, r24	; 0x02
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	9b 81       	ldd	r25, Y+3	; 0x03
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <DisplayOnOffControl4Bit+0x2ea>
    27bc:	9b 83       	std	Y+3, r25	; 0x03
    27be:	8a 83       	std	Y+2, r24	; 0x02
    27c0:	0f c0       	rjmp	.+30     	; 0x27e0 <DisplayOnOffControl4Bit+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27c2:	69 89       	ldd	r22, Y+17	; 0x11
    27c4:	7a 89       	ldd	r23, Y+18	; 0x12
    27c6:	8b 89       	ldd	r24, Y+19	; 0x13
    27c8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	88 8b       	std	Y+16, r24	; 0x10
    27d4:	88 89       	ldd	r24, Y+16	; 0x10
    27d6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	8a 95       	dec	r24
    27dc:	f1 f7       	brne	.-4      	; 0x27da <DisplayOnOffControl4Bit+0x30c>
    27de:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0xC);
    27e0:	8c e0       	ldi	r24, 0x0C	; 12
    27e2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
}
    27e6:	e0 96       	adiw	r28, 0x30	; 48
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <DisplayClear4Bit>:
static void DisplayClear4Bit(void){
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	e0 97       	sbiw	r28, 0x30	; 48
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a8 e4       	ldi	r26, 0x48	; 72
    2812:	b2 e4       	ldi	r27, 0x42	; 66
    2814:	8d a7       	std	Y+45, r24	; 0x2d
    2816:	9e a7       	std	Y+46, r25	; 0x2e
    2818:	af a7       	std	Y+47, r26	; 0x2f
    281a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    281c:	6d a5       	ldd	r22, Y+45	; 0x2d
    281e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2820:	8f a5       	ldd	r24, Y+47	; 0x2f
    2822:	98 a9       	ldd	r25, Y+48	; 0x30
    2824:	2b ea       	ldi	r18, 0xAB	; 171
    2826:	3a ea       	ldi	r19, 0xAA	; 170
    2828:	4a e2       	ldi	r20, 0x2A	; 42
    282a:	50 e4       	ldi	r21, 0x40	; 64
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	89 a7       	std	Y+41, r24	; 0x29
    2836:	9a a7       	std	Y+42, r25	; 0x2a
    2838:	ab a7       	std	Y+43, r26	; 0x2b
    283a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    283c:	69 a5       	ldd	r22, Y+41	; 0x29
    283e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2840:	8b a5       	ldd	r24, Y+43	; 0x2b
    2842:	9c a5       	ldd	r25, Y+44	; 0x2c
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2850:	88 23       	and	r24, r24
    2852:	1c f4       	brge	.+6      	; 0x285a <DisplayClear4Bit+0x62>
		__ticks = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	88 a7       	std	Y+40, r24	; 0x28
    2858:	91 c0       	rjmp	.+290    	; 0x297c <DisplayClear4Bit+0x184>
	else if (__tmp > 255)
    285a:	69 a5       	ldd	r22, Y+41	; 0x29
    285c:	7a a5       	ldd	r23, Y+42	; 0x2a
    285e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2860:	9c a5       	ldd	r25, Y+44	; 0x2c
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	53 e4       	ldi	r21, 0x43	; 67
    286a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	0c f0       	brlt	.+2      	; 0x2874 <DisplayClear4Bit+0x7c>
    2872:	7b c0       	rjmp	.+246    	; 0x296a <DisplayClear4Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    2874:	6d a5       	ldd	r22, Y+45	; 0x2d
    2876:	7e a5       	ldd	r23, Y+46	; 0x2e
    2878:	8f a5       	ldd	r24, Y+47	; 0x2f
    287a:	98 a9       	ldd	r25, Y+48	; 0x30
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a e7       	ldi	r20, 0x7A	; 122
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8c a3       	std	Y+36, r24	; 0x24
    288e:	9d a3       	std	Y+37, r25	; 0x25
    2890:	ae a3       	std	Y+38, r26	; 0x26
    2892:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2894:	6c a1       	ldd	r22, Y+36	; 0x24
    2896:	7d a1       	ldd	r23, Y+37	; 0x25
    2898:	8e a1       	ldd	r24, Y+38	; 0x26
    289a:	9f a1       	ldd	r25, Y+39	; 0x27
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a ef       	ldi	r20, 0xFA	; 250
    28a2:	54 e4       	ldi	r21, 0x44	; 68
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	88 a3       	std	Y+32, r24	; 0x20
    28ae:	99 a3       	std	Y+33, r25	; 0x21
    28b0:	aa a3       	std	Y+34, r26	; 0x22
    28b2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    28b4:	68 a1       	ldd	r22, Y+32	; 0x20
    28b6:	79 a1       	ldd	r23, Y+33	; 0x21
    28b8:	8a a1       	ldd	r24, Y+34	; 0x22
    28ba:	9b a1       	ldd	r25, Y+35	; 0x23
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e8       	ldi	r20, 0x80	; 128
    28c2:	5f e3       	ldi	r21, 0x3F	; 63
    28c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c8:	88 23       	and	r24, r24
    28ca:	2c f4       	brge	.+10     	; 0x28d6 <DisplayClear4Bit+0xde>
		__ticks = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	9f 8f       	std	Y+31, r25	; 0x1f
    28d2:	8e 8f       	std	Y+30, r24	; 0x1e
    28d4:	3f c0       	rjmp	.+126    	; 0x2954 <DisplayClear4Bit+0x15c>
	else if (__tmp > 65535)
    28d6:	68 a1       	ldd	r22, Y+32	; 0x20
    28d8:	79 a1       	ldd	r23, Y+33	; 0x21
    28da:	8a a1       	ldd	r24, Y+34	; 0x22
    28dc:	9b a1       	ldd	r25, Y+35	; 0x23
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	4c f5       	brge	.+82     	; 0x2940 <DisplayClear4Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ee:	6c a1       	ldd	r22, Y+36	; 0x24
    28f0:	7d a1       	ldd	r23, Y+37	; 0x25
    28f2:	8e a1       	ldd	r24, Y+38	; 0x26
    28f4:	9f a1       	ldd	r25, Y+39	; 0x27
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e2       	ldi	r20, 0x20	; 32
    28fc:	51 e4       	ldi	r21, 0x41	; 65
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9f 8f       	std	Y+31, r25	; 0x1f
    2914:	8e 8f       	std	Y+30, r24	; 0x1e
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <DisplayClear4Bit+0x13e>
    2918:	88 ec       	ldi	r24, 0xC8	; 200
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9d 8f       	std	Y+29, r25	; 0x1d
    291e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2920:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2922:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <DisplayClear4Bit+0x12c>
    2928:	9d 8f       	std	Y+29, r25	; 0x1d
    292a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    292e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	9f 8f       	std	Y+31, r25	; 0x1f
    2934:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2936:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2938:	9f 8d       	ldd	r25, Y+31	; 0x1f
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	69 f7       	brne	.-38     	; 0x2918 <DisplayClear4Bit+0x120>
    293e:	24 c0       	rjmp	.+72     	; 0x2988 <DisplayClear4Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2940:	68 a1       	ldd	r22, Y+32	; 0x20
    2942:	79 a1       	ldd	r23, Y+33	; 0x21
    2944:	8a a1       	ldd	r24, Y+34	; 0x22
    2946:	9b a1       	ldd	r25, Y+35	; 0x23
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9f 8f       	std	Y+31, r25	; 0x1f
    2952:	8e 8f       	std	Y+30, r24	; 0x1e
    2954:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2956:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2958:	9b 8f       	std	Y+27, r25	; 0x1b
    295a:	8a 8f       	std	Y+26, r24	; 0x1a
    295c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    295e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <DisplayClear4Bit+0x168>
    2964:	9b 8f       	std	Y+27, r25	; 0x1b
    2966:	8a 8f       	std	Y+26, r24	; 0x1a
    2968:	0f c0       	rjmp	.+30     	; 0x2988 <DisplayClear4Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    296a:	69 a5       	ldd	r22, Y+41	; 0x29
    296c:	7a a5       	ldd	r23, Y+42	; 0x2a
    296e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2970:	9c a5       	ldd	r25, Y+44	; 0x2c
    2972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	88 a7       	std	Y+40, r24	; 0x28
    297c:	88 a5       	ldd	r24, Y+40	; 0x28
    297e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2980:	89 8d       	ldd	r24, Y+25	; 0x19
    2982:	8a 95       	dec	r24
    2984:	f1 f7       	brne	.-4      	; 0x2982 <DisplayClear4Bit+0x18a>
    2986:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_WriteCommand4Bit(0x0);
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	a0 e2       	ldi	r26, 0x20	; 32
    2994:	b1 e4       	ldi	r27, 0x41	; 65
    2996:	8d 8b       	std	Y+21, r24	; 0x15
    2998:	9e 8b       	std	Y+22, r25	; 0x16
    299a:	af 8b       	std	Y+23, r26	; 0x17
    299c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    299e:	6d 89       	ldd	r22, Y+21	; 0x15
    29a0:	7e 89       	ldd	r23, Y+22	; 0x16
    29a2:	8f 89       	ldd	r24, Y+23	; 0x17
    29a4:	98 8d       	ldd	r25, Y+24	; 0x18
    29a6:	2b ea       	ldi	r18, 0xAB	; 171
    29a8:	3a ea       	ldi	r19, 0xAA	; 170
    29aa:	4a e2       	ldi	r20, 0x2A	; 42
    29ac:	50 e4       	ldi	r21, 0x40	; 64
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	89 8b       	std	Y+17, r24	; 0x11
    29b8:	9a 8b       	std	Y+18, r25	; 0x12
    29ba:	ab 8b       	std	Y+19, r26	; 0x13
    29bc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    29be:	69 89       	ldd	r22, Y+17	; 0x11
    29c0:	7a 89       	ldd	r23, Y+18	; 0x12
    29c2:	8b 89       	ldd	r24, Y+19	; 0x13
    29c4:	9c 89       	ldd	r25, Y+20	; 0x14
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e8       	ldi	r20, 0x80	; 128
    29cc:	5f e3       	ldi	r21, 0x3F	; 63
    29ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d2:	88 23       	and	r24, r24
    29d4:	1c f4       	brge	.+6      	; 0x29dc <DisplayClear4Bit+0x1e4>
		__ticks = 1;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	88 8b       	std	Y+16, r24	; 0x10
    29da:	91 c0       	rjmp	.+290    	; 0x2afe <DisplayClear4Bit+0x306>
	else if (__tmp > 255)
    29dc:	69 89       	ldd	r22, Y+17	; 0x11
    29de:	7a 89       	ldd	r23, Y+18	; 0x12
    29e0:	8b 89       	ldd	r24, Y+19	; 0x13
    29e2:	9c 89       	ldd	r25, Y+20	; 0x14
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	53 e4       	ldi	r21, 0x43	; 67
    29ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	0c f0       	brlt	.+2      	; 0x29f6 <DisplayClear4Bit+0x1fe>
    29f4:	7b c0       	rjmp	.+246    	; 0x2aec <DisplayClear4Bit+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    29f6:	6d 89       	ldd	r22, Y+21	; 0x15
    29f8:	7e 89       	ldd	r23, Y+22	; 0x16
    29fa:	8f 89       	ldd	r24, Y+23	; 0x17
    29fc:	98 8d       	ldd	r25, Y+24	; 0x18
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a e7       	ldi	r20, 0x7A	; 122
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8c 87       	std	Y+12, r24	; 0x0c
    2a10:	9d 87       	std	Y+13, r25	; 0x0d
    2a12:	ae 87       	std	Y+14, r26	; 0x0e
    2a14:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a16:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a18:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4a ef       	ldi	r20, 0xFA	; 250
    2a24:	54 e4       	ldi	r21, 0x44	; 68
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	88 87       	std	Y+8, r24	; 0x08
    2a30:	99 87       	std	Y+9, r25	; 0x09
    2a32:	aa 87       	std	Y+10, r26	; 0x0a
    2a34:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a36:	68 85       	ldd	r22, Y+8	; 0x08
    2a38:	79 85       	ldd	r23, Y+9	; 0x09
    2a3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e8       	ldi	r20, 0x80	; 128
    2a44:	5f e3       	ldi	r21, 0x3F	; 63
    2a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a4a:	88 23       	and	r24, r24
    2a4c:	2c f4       	brge	.+10     	; 0x2a58 <DisplayClear4Bit+0x260>
		__ticks = 1;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	9f 83       	std	Y+7, r25	; 0x07
    2a54:	8e 83       	std	Y+6, r24	; 0x06
    2a56:	3f c0       	rjmp	.+126    	; 0x2ad6 <DisplayClear4Bit+0x2de>
	else if (__tmp > 65535)
    2a58:	68 85       	ldd	r22, Y+8	; 0x08
    2a5a:	79 85       	ldd	r23, Y+9	; 0x09
    2a5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	3f ef       	ldi	r19, 0xFF	; 255
    2a64:	4f e7       	ldi	r20, 0x7F	; 127
    2a66:	57 e4       	ldi	r21, 0x47	; 71
    2a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a6c:	18 16       	cp	r1, r24
    2a6e:	4c f5       	brge	.+82     	; 0x2ac2 <DisplayClear4Bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a70:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a72:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a74:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a76:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e2       	ldi	r20, 0x20	; 32
    2a7e:	51 e4       	ldi	r21, 0x41	; 65
    2a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	9f 83       	std	Y+7, r25	; 0x07
    2a96:	8e 83       	std	Y+6, r24	; 0x06
    2a98:	0f c0       	rjmp	.+30     	; 0x2ab8 <DisplayClear4Bit+0x2c0>
    2a9a:	88 ec       	ldi	r24, 0xC8	; 200
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9d 83       	std	Y+5, r25	; 0x05
    2aa0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <DisplayClear4Bit+0x2ae>
    2aaa:	9d 83       	std	Y+5, r25	; 0x05
    2aac:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aae:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	9f 83       	std	Y+7, r25	; 0x07
    2ab6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aba:	9f 81       	ldd	r25, Y+7	; 0x07
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	69 f7       	brne	.-38     	; 0x2a9a <DisplayClear4Bit+0x2a2>
    2ac0:	24 c0       	rjmp	.+72     	; 0x2b0a <DisplayClear4Bit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac2:	68 85       	ldd	r22, Y+8	; 0x08
    2ac4:	79 85       	ldd	r23, Y+9	; 0x09
    2ac6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ac8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9f 83       	std	Y+7, r25	; 0x07
    2ad4:	8e 83       	std	Y+6, r24	; 0x06
    2ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    2ada:	9b 83       	std	Y+3, r25	; 0x03
    2adc:	8a 83       	std	Y+2, r24	; 0x02
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <DisplayClear4Bit+0x2ea>
    2ae6:	9b 83       	std	Y+3, r25	; 0x03
    2ae8:	8a 83       	std	Y+2, r24	; 0x02
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <DisplayClear4Bit+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2aec:	69 89       	ldd	r22, Y+17	; 0x11
    2aee:	7a 89       	ldd	r23, Y+18	; 0x12
    2af0:	8b 89       	ldd	r24, Y+19	; 0x13
    2af2:	9c 89       	ldd	r25, Y+20	; 0x14
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	88 8b       	std	Y+16, r24	; 0x10
    2afe:	88 89       	ldd	r24, Y+16	; 0x10
    2b00:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	8a 95       	dec	r24
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <DisplayClear4Bit+0x30c>
    2b08:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x1);
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
}
    2b10:	e0 96       	adiw	r28, 0x30	; 48
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <EntryModeSet4Bit>:
static void EntryModeSet4Bit(void){
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	a6 97       	sbiw	r28, 0x26	; 38
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a0 e0       	ldi	r26, 0x00	; 0
    2b3c:	b0 e4       	ldi	r27, 0x40	; 64
    2b3e:	8b a3       	std	Y+35, r24	; 0x23
    2b40:	9c a3       	std	Y+36, r25	; 0x24
    2b42:	ad a3       	std	Y+37, r26	; 0x25
    2b44:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	6b a1       	ldd	r22, Y+35	; 0x23
    2b48:	7c a1       	ldd	r23, Y+36	; 0x24
    2b4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a ef       	ldi	r20, 0xFA	; 250
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b60:	98 a3       	std	Y+32, r25	; 0x20
    2b62:	a9 a3       	std	Y+33, r26	; 0x21
    2b64:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2b66:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b68:	78 a1       	ldd	r23, Y+32	; 0x20
    2b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	5f e3       	ldi	r21, 0x3F	; 63
    2b76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b7a:	88 23       	and	r24, r24
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <EntryModeSet4Bit+0x66>
		__ticks = 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9e 8f       	std	Y+30, r25	; 0x1e
    2b84:	8d 8f       	std	Y+29, r24	; 0x1d
    2b86:	3f c0       	rjmp	.+126    	; 0x2c06 <EntryModeSet4Bit+0xe4>
	else if (__tmp > 65535)
    2b88:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b8a:	78 a1       	ldd	r23, Y+32	; 0x20
    2b8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	4c f5       	brge	.+82     	; 0x2bf2 <EntryModeSet4Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e2       	ldi	r20, 0x20	; 32
    2bae:	51 e4       	ldi	r21, 0x41	; 65
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc6:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <EntryModeSet4Bit+0xc6>
    2bca:	88 ec       	ldi	r24, 0xC8	; 200
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9c 8f       	std	Y+28, r25	; 0x1c
    2bd0:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <EntryModeSet4Bit+0xb4>
    2bda:	9c 8f       	std	Y+28, r25	; 0x1c
    2bdc:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2be0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	9e 8f       	std	Y+30, r25	; 0x1e
    2be6:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	69 f7       	brne	.-38     	; 0x2bca <EntryModeSet4Bit+0xa8>
    2bf0:	14 c0       	rjmp	.+40     	; 0x2c1a <EntryModeSet4Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bf4:	78 a1       	ldd	r23, Y+32	; 0x20
    2bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9e 8f       	std	Y+30, r25	; 0x1e
    2c04:	8d 8f       	std	Y+29, r24	; 0x1d
    2c06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c0a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c0c:	89 8f       	std	Y+25, r24	; 0x19
    2c0e:	89 8d       	ldd	r24, Y+25	; 0x19
    2c10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <EntryModeSet4Bit+0xf0>
    2c16:	9a 8f       	std	Y+26, r25	; 0x1a
    2c18:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(2);
	LCD_WriteCommand4Bit(0x0);
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a0 e2       	ldi	r26, 0x20	; 32
    2c26:	b1 e4       	ldi	r27, 0x41	; 65
    2c28:	8d 8b       	std	Y+21, r24	; 0x15
    2c2a:	9e 8b       	std	Y+22, r25	; 0x16
    2c2c:	af 8b       	std	Y+23, r26	; 0x17
    2c2e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c30:	6d 89       	ldd	r22, Y+21	; 0x15
    2c32:	7e 89       	ldd	r23, Y+22	; 0x16
    2c34:	8f 89       	ldd	r24, Y+23	; 0x17
    2c36:	98 8d       	ldd	r25, Y+24	; 0x18
    2c38:	2b ea       	ldi	r18, 0xAB	; 171
    2c3a:	3a ea       	ldi	r19, 0xAA	; 170
    2c3c:	4a e2       	ldi	r20, 0x2A	; 42
    2c3e:	50 e4       	ldi	r21, 0x40	; 64
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	89 8b       	std	Y+17, r24	; 0x11
    2c4a:	9a 8b       	std	Y+18, r25	; 0x12
    2c4c:	ab 8b       	std	Y+19, r26	; 0x13
    2c4e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c50:	69 89       	ldd	r22, Y+17	; 0x11
    2c52:	7a 89       	ldd	r23, Y+18	; 0x12
    2c54:	8b 89       	ldd	r24, Y+19	; 0x13
    2c56:	9c 89       	ldd	r25, Y+20	; 0x14
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	40 e8       	ldi	r20, 0x80	; 128
    2c5e:	5f e3       	ldi	r21, 0x3F	; 63
    2c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c64:	88 23       	and	r24, r24
    2c66:	1c f4       	brge	.+6      	; 0x2c6e <EntryModeSet4Bit+0x14c>
		__ticks = 1;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	88 8b       	std	Y+16, r24	; 0x10
    2c6c:	91 c0       	rjmp	.+290    	; 0x2d90 <EntryModeSet4Bit+0x26e>
	else if (__tmp > 255)
    2c6e:	69 89       	ldd	r22, Y+17	; 0x11
    2c70:	7a 89       	ldd	r23, Y+18	; 0x12
    2c72:	8b 89       	ldd	r24, Y+19	; 0x13
    2c74:	9c 89       	ldd	r25, Y+20	; 0x14
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4f e7       	ldi	r20, 0x7F	; 127
    2c7c:	53 e4       	ldi	r21, 0x43	; 67
    2c7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c82:	18 16       	cp	r1, r24
    2c84:	0c f0       	brlt	.+2      	; 0x2c88 <EntryModeSet4Bit+0x166>
    2c86:	7b c0       	rjmp	.+246    	; 0x2d7e <EntryModeSet4Bit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    2c88:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a e7       	ldi	r20, 0x7A	; 122
    2c96:	54 e4       	ldi	r21, 0x44	; 68
    2c98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8c 87       	std	Y+12, r24	; 0x0c
    2ca2:	9d 87       	std	Y+13, r25	; 0x0d
    2ca4:	ae 87       	std	Y+14, r26	; 0x0e
    2ca6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2caa:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cac:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cae:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	4a ef       	ldi	r20, 0xFA	; 250
    2cb6:	54 e4       	ldi	r21, 0x44	; 68
    2cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	88 87       	std	Y+8, r24	; 0x08
    2cc2:	99 87       	std	Y+9, r25	; 0x09
    2cc4:	aa 87       	std	Y+10, r26	; 0x0a
    2cc6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cc8:	68 85       	ldd	r22, Y+8	; 0x08
    2cca:	79 85       	ldd	r23, Y+9	; 0x09
    2ccc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cce:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	2c f4       	brge	.+10     	; 0x2cea <EntryModeSet4Bit+0x1c8>
		__ticks = 1;
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9f 83       	std	Y+7, r25	; 0x07
    2ce6:	8e 83       	std	Y+6, r24	; 0x06
    2ce8:	3f c0       	rjmp	.+126    	; 0x2d68 <EntryModeSet4Bit+0x246>
	else if (__tmp > 65535)
    2cea:	68 85       	ldd	r22, Y+8	; 0x08
    2cec:	79 85       	ldd	r23, Y+9	; 0x09
    2cee:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cf0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	3f ef       	ldi	r19, 0xFF	; 255
    2cf6:	4f e7       	ldi	r20, 0x7F	; 127
    2cf8:	57 e4       	ldi	r21, 0x47	; 71
    2cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cfe:	18 16       	cp	r1, r24
    2d00:	4c f5       	brge	.+82     	; 0x2d54 <EntryModeSet4Bit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d02:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d04:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d06:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d08:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	40 e2       	ldi	r20, 0x20	; 32
    2d10:	51 e4       	ldi	r21, 0x41	; 65
    2d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	bc 01       	movw	r22, r24
    2d1c:	cd 01       	movw	r24, r26
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	9f 83       	std	Y+7, r25	; 0x07
    2d28:	8e 83       	std	Y+6, r24	; 0x06
    2d2a:	0f c0       	rjmp	.+30     	; 0x2d4a <EntryModeSet4Bit+0x228>
    2d2c:	88 ec       	ldi	r24, 0xC8	; 200
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	9d 83       	std	Y+5, r25	; 0x05
    2d32:	8c 83       	std	Y+4, r24	; 0x04
    2d34:	8c 81       	ldd	r24, Y+4	; 0x04
    2d36:	9d 81       	ldd	r25, Y+5	; 0x05
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <EntryModeSet4Bit+0x216>
    2d3c:	9d 83       	std	Y+5, r25	; 0x05
    2d3e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d40:	8e 81       	ldd	r24, Y+6	; 0x06
    2d42:	9f 81       	ldd	r25, Y+7	; 0x07
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	9f 83       	std	Y+7, r25	; 0x07
    2d48:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	69 f7       	brne	.-38     	; 0x2d2c <EntryModeSet4Bit+0x20a>
    2d52:	24 c0       	rjmp	.+72     	; 0x2d9c <EntryModeSet4Bit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d54:	68 85       	ldd	r22, Y+8	; 0x08
    2d56:	79 85       	ldd	r23, Y+9	; 0x09
    2d58:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	9f 83       	std	Y+7, r25	; 0x07
    2d66:	8e 83       	std	Y+6, r24	; 0x06
    2d68:	8e 81       	ldd	r24, Y+6	; 0x06
    2d6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d6c:	9b 83       	std	Y+3, r25	; 0x03
    2d6e:	8a 83       	std	Y+2, r24	; 0x02
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	9b 81       	ldd	r25, Y+3	; 0x03
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <EntryModeSet4Bit+0x252>
    2d78:	9b 83       	std	Y+3, r25	; 0x03
    2d7a:	8a 83       	std	Y+2, r24	; 0x02
    2d7c:	0f c0       	rjmp	.+30     	; 0x2d9c <EntryModeSet4Bit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d7e:	69 89       	ldd	r22, Y+17	; 0x11
    2d80:	7a 89       	ldd	r23, Y+18	; 0x12
    2d82:	8b 89       	ldd	r24, Y+19	; 0x13
    2d84:	9c 89       	ldd	r25, Y+20	; 0x14
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	88 8b       	std	Y+16, r24	; 0x10
    2d90:	88 89       	ldd	r24, Y+16	; 0x10
    2d92:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	8a 95       	dec	r24
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <EntryModeSet4Bit+0x274>
    2d9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x6);
    2d9c:	86 e0       	ldi	r24, 0x06	; 6
    2d9e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_WriteCommand4Bit>
}
    2da2:	a6 96       	adiw	r28, 0x26	; 38
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	cf 91       	pop	r28
    2db0:	df 91       	pop	r29
    2db2:	08 95       	ret

00002db4 <KPD_Init>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t KPD_Init(void){
    2db4:	df 93       	push	r29
    2db6:	cf 93       	push	r28
    2db8:	0f 92       	push	r0
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    2dbe:	19 82       	std	Y+1, r1	; 0x01
	/*	Rows	OUTPUT HIGH	*/
	RowsInitialization();
    2dc0:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <RowsInitialization>

	/*	Columns	 INPUT PULLUP	*/
	ColumnsInitialization();
    2dc4:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ColumnsInitialization>
	Local_enuErrorstate = ES_OK;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <KPD_u8GetPressedKey>:

@retval KPD_NO_PRESSED_KEY if no key is pressed.

@retval the value of the pressed key.
*/
u8 KPD_u8GetPressedKey(void){
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <KPD_u8GetPressedKey+0x6>
    2ddc:	00 d0       	rcall	.+0      	; 0x2dde <KPD_u8GetPressedKey+0x8>
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    2de2:	8f ef       	ldi	r24, 0xFF	; 255
    2de4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8RowIdx,Local_u8ColumnIdx;
	static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[] ={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static u8 Local_u8KPDRowArr[] ={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};

	for(Local_u8RowIdx = 0;Local_u8RowIdx < KPD_ROW_NUM ; Local_u8RowIdx++){
    2de6:	1a 82       	std	Y+2, r1	; 0x02
    2de8:	76 c0       	rjmp	.+236    	; 0x2ed6 <KPD_u8GetPressedKey+0x100>

		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],LOW);
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	88 2f       	mov	r24, r24
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	fc 01       	movw	r30, r24
    2df2:	ed 58       	subi	r30, 0x8D	; 141
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	90 81       	ld	r25, Z
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	69 2f       	mov	r22, r25
    2dfc:	40 e0       	ldi	r20, 0x00	; 0
    2dfe:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>

		for(Local_u8ColumnIdx = 0;Local_u8ColumnIdx < KPD_COL_NUM ; Local_u8ColumnIdx++){
    2e02:	19 82       	std	Y+1, r1	; 0x01
    2e04:	55 c0       	rjmp	.+170    	; 0x2eb0 <KPD_u8GetPressedKey+0xda>
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]);
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	88 2f       	mov	r24, r24
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	e9 58       	subi	r30, 0x89	; 137
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	90 81       	ld	r25, Z
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	69 2f       	mov	r22, r25
    2e18:	0e 94 76 09 	call	0x12ec	; 0x12ec <DIO_u8GetPinValue>

			if(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	fc 01       	movw	r30, r24
    2e24:	e9 58       	subi	r30, 0x89	; 137
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	90 81       	ld	r25, Z
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	69 2f       	mov	r22, r25
    2e2e:	0e 94 76 09 	call	0x12ec	; 0x12ec <DIO_u8GetPinValue>
    2e32:	88 23       	and	r24, r24
    2e34:	d1 f5       	brne	.+116    	; 0x2eaa <KPD_u8GetPressedKey+0xd4>

				Local_u8PressedKey =Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	48 2f       	mov	r20, r24
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	ca 01       	movw	r24, r20
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	82 0f       	add	r24, r18
    2e4e:	93 1f       	adc	r25, r19
    2e50:	fc 01       	movw	r30, r24
    2e52:	e5 58       	subi	r30, 0x85	; 133
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 81       	ld	r24, Z
    2e58:	8b 83       	std	Y+3, r24	; 0x03
    2e5a:	0b c0       	rjmp	.+22     	; 0x2e72 <KPD_u8GetPressedKey+0x9c>

				while(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){

					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]);
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	88 2f       	mov	r24, r24
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	fc 01       	movw	r30, r24
    2e64:	e9 58       	subi	r30, 0x89	; 137
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	90 81       	ld	r25, Z
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	69 2f       	mov	r22, r25
    2e6e:	0e 94 76 09 	call	0x12ec	; 0x12ec <DIO_u8GetPinValue>

			if(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){

				Local_u8PressedKey =Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				while(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	88 2f       	mov	r24, r24
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	fc 01       	movw	r30, r24
    2e7a:	e9 58       	subi	r30, 0x89	; 137
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	90 81       	ld	r25, Z
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	69 2f       	mov	r22, r25
    2e84:	0e 94 76 09 	call	0x12ec	; 0x12ec <DIO_u8GetPinValue>
    2e88:	88 23       	and	r24, r24
    2e8a:	41 f3       	breq	.-48     	; 0x2e5c <KPD_u8GetPressedKey+0x86>

					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]);

				}

				DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	88 2f       	mov	r24, r24
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	fc 01       	movw	r30, r24
    2e94:	ed 58       	subi	r30, 0x8D	; 141
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	90 81       	ld	r25, Z
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	69 2f       	mov	r22, r25
    2e9e:	41 e0       	ldi	r20, 0x01	; 1
    2ea0:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
				return Local_u8PressedKey;
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea6:	8c 83       	std	Y+4, r24	; 0x04
    2ea8:	1c c0       	rjmp	.+56     	; 0x2ee2 <KPD_u8GetPressedKey+0x10c>

	for(Local_u8RowIdx = 0;Local_u8RowIdx < KPD_ROW_NUM ; Local_u8RowIdx++){

		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],LOW);

		for(Local_u8ColumnIdx = 0;Local_u8ColumnIdx < KPD_COL_NUM ; Local_u8ColumnIdx++){
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	84 30       	cpi	r24, 0x04	; 4
    2eb4:	08 f4       	brcc	.+2      	; 0x2eb8 <KPD_u8GetPressedKey+0xe2>
    2eb6:	a7 cf       	rjmp	.-178    	; 0x2e06 <KPD_u8GetPressedKey+0x30>

				DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);
				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	88 2f       	mov	r24, r24
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	ed 58       	subi	r30, 0x8D	; 141
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	90 81       	ld	r25, Z
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	69 2f       	mov	r22, r25
    2eca:	41 e0       	ldi	r20, 0x01	; 1
    2ecc:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
	u8 Local_u8RowIdx,Local_u8ColumnIdx;
	static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[] ={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static u8 Local_u8KPDRowArr[] ={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};

	for(Local_u8RowIdx = 0;Local_u8RowIdx < KPD_ROW_NUM ; Local_u8RowIdx++){
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	8f 5f       	subi	r24, 0xFF	; 255
    2ed4:	8a 83       	std	Y+2, r24	; 0x02
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	84 30       	cpi	r24, 0x04	; 4
    2eda:	08 f4       	brcc	.+2      	; 0x2ede <KPD_u8GetPressedKey+0x108>
    2edc:	86 cf       	rjmp	.-244    	; 0x2dea <KPD_u8GetPressedKey+0x14>
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);

	}
	return Local_u8PressedKey;
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	8c 83       	std	Y+4, r24	; 0x04
    2ee2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <RowsInitialization>:


static void RowsInitialization(void){
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(KPD_PORT,KPD_ROW0,OUTPUT);
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	41 e0       	ldi	r20, 0x01	; 1
    2f00:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW0,HIGH);
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	41 e0       	ldi	r20, 0x01	; 1
    2f0a:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW1,OUTPUT);
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	61 e0       	ldi	r22, 0x01	; 1
    2f12:	41 e0       	ldi	r20, 0x01	; 1
    2f14:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW1,HIGH);
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	61 e0       	ldi	r22, 0x01	; 1
    2f1c:	41 e0       	ldi	r20, 0x01	; 1
    2f1e:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW2,OUTPUT);
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	62 e0       	ldi	r22, 0x02	; 2
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW2,HIGH);
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	62 e0       	ldi	r22, 0x02	; 2
    2f30:	41 e0       	ldi	r20, 0x01	; 1
    2f32:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW3,OUTPUT);
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	63 e0       	ldi	r22, 0x03	; 3
    2f3a:	41 e0       	ldi	r20, 0x01	; 1
    2f3c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW3,HIGH);
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	63 e0       	ldi	r22, 0x03	; 3
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
}
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <ColumnsInitialization>:
static void ColumnsInitialization(void){
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(KPD_PORT,KPD_COL0,INPUT);
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	64 e0       	ldi	r22, 0x04	; 4
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL0,HIGH);
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	64 e0       	ldi	r22, 0x04	; 4
    2f66:	41 e0       	ldi	r20, 0x01	; 1
    2f68:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_COL1,INPUT);
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	65 e0       	ldi	r22, 0x05	; 5
    2f70:	40 e0       	ldi	r20, 0x00	; 0
    2f72:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL1,HIGH);
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	65 e0       	ldi	r22, 0x05	; 5
    2f7a:	41 e0       	ldi	r20, 0x01	; 1
    2f7c:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_COL2,INPUT);
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	66 e0       	ldi	r22, 0x06	; 6
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL2,HIGH);
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	66 e0       	ldi	r22, 0x06	; 6
    2f8e:	41 e0       	ldi	r20, 0x01	; 1
    2f90:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_COL3,INPUT);
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	67 e0       	ldi	r22, 0x07	; 7
    2f98:	40 e0       	ldi	r20, 0x00	; 0
    2f9a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL3,HIGH);
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	67 e0       	ldi	r22, 0x07	; 7
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_SetPinValue>

}
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <StrToInt>:
 */

#include "APP.h"


s16 StrToInt(const s8 *str) {
    2fae:	df 93       	push	r29
    2fb0:	cf 93       	push	r28
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	28 97       	sbiw	r28, 0x08	; 8
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	98 87       	std	Y+8, r25	; 0x08
    2fc4:	8f 83       	std	Y+7, r24	; 0x07
    s16 res = 0;
    2fc6:	1e 82       	std	Y+6, r1	; 0x06
    2fc8:	1d 82       	std	Y+5, r1	; 0x05
    int sign = 1;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	9c 83       	std	Y+4, r25	; 0x04
    2fd0:	8b 83       	std	Y+3, r24	; 0x03
    int i = 0;
    2fd2:	1a 82       	std	Y+2, r1	; 0x02
    2fd4:	19 82       	std	Y+1, r1	; 0x01

    if (str[i] == '-') {
    2fd6:	29 81       	ldd	r18, Y+1	; 0x01
    2fd8:	3a 81       	ldd	r19, Y+2	; 0x02
    2fda:	8f 81       	ldd	r24, Y+7	; 0x07
    2fdc:	98 85       	ldd	r25, Y+8	; 0x08
    2fde:	fc 01       	movw	r30, r24
    2fe0:	e2 0f       	add	r30, r18
    2fe2:	f3 1f       	adc	r31, r19
    2fe4:	80 81       	ld	r24, Z
    2fe6:	8d 32       	cpi	r24, 0x2D	; 45
    2fe8:	09 f0       	breq	.+2      	; 0x2fec <StrToInt+0x3e>
    2fea:	40 c0       	rjmp	.+128    	; 0x306c <StrToInt+0xbe>
        sign = -1;
    2fec:	8f ef       	ldi	r24, 0xFF	; 255
    2fee:	9f ef       	ldi	r25, 0xFF	; 255
    2ff0:	9c 83       	std	Y+4, r25	; 0x04
    2ff2:	8b 83       	std	Y+3, r24	; 0x03
        i++;
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff8:	01 96       	adiw	r24, 0x01	; 1
    2ffa:	9a 83       	std	Y+2, r25	; 0x02
    2ffc:	89 83       	std	Y+1, r24	; 0x01
    2ffe:	36 c0       	rjmp	.+108    	; 0x306c <StrToInt+0xbe>
    }

    for (; str[i] != '\0'; i++) {
        if (str[i] >= '0' && str[i] <= '9') {
    3000:	29 81       	ldd	r18, Y+1	; 0x01
    3002:	3a 81       	ldd	r19, Y+2	; 0x02
    3004:	8f 81       	ldd	r24, Y+7	; 0x07
    3006:	98 85       	ldd	r25, Y+8	; 0x08
    3008:	fc 01       	movw	r30, r24
    300a:	e2 0f       	add	r30, r18
    300c:	f3 1f       	adc	r31, r19
    300e:	80 81       	ld	r24, Z
    3010:	80 33       	cpi	r24, 0x30	; 48
    3012:	bc f1       	brlt	.+110    	; 0x3082 <StrToInt+0xd4>
    3014:	29 81       	ldd	r18, Y+1	; 0x01
    3016:	3a 81       	ldd	r19, Y+2	; 0x02
    3018:	8f 81       	ldd	r24, Y+7	; 0x07
    301a:	98 85       	ldd	r25, Y+8	; 0x08
    301c:	fc 01       	movw	r30, r24
    301e:	e2 0f       	add	r30, r18
    3020:	f3 1f       	adc	r31, r19
    3022:	80 81       	ld	r24, Z
    3024:	8a 33       	cpi	r24, 0x3A	; 58
    3026:	6c f5       	brge	.+90     	; 0x3082 <StrToInt+0xd4>
            res = res * 10 + (str[i] - '0');
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	9e 81       	ldd	r25, Y+6	; 0x06
    302c:	9c 01       	movw	r18, r24
    302e:	22 0f       	add	r18, r18
    3030:	33 1f       	adc	r19, r19
    3032:	c9 01       	movw	r24, r18
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	a9 01       	movw	r20, r18
    303e:	48 0f       	add	r20, r24
    3040:	59 1f       	adc	r21, r25
    3042:	29 81       	ldd	r18, Y+1	; 0x01
    3044:	3a 81       	ldd	r19, Y+2	; 0x02
    3046:	8f 81       	ldd	r24, Y+7	; 0x07
    3048:	98 85       	ldd	r25, Y+8	; 0x08
    304a:	fc 01       	movw	r30, r24
    304c:	e2 0f       	add	r30, r18
    304e:	f3 1f       	adc	r31, r19
    3050:	80 81       	ld	r24, Z
    3052:	99 27       	eor	r25, r25
    3054:	87 fd       	sbrc	r24, 7
    3056:	90 95       	com	r25
    3058:	c0 97       	sbiw	r24, 0x30	; 48
    305a:	84 0f       	add	r24, r20
    305c:	95 1f       	adc	r25, r21
    305e:	9e 83       	std	Y+6, r25	; 0x06
    3060:	8d 83       	std	Y+5, r24	; 0x05
    if (str[i] == '-') {
        sign = -1;
        i++;
    }

    for (; str[i] != '\0'; i++) {
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	9a 81       	ldd	r25, Y+2	; 0x02
    3066:	01 96       	adiw	r24, 0x01	; 1
    3068:	9a 83       	std	Y+2, r25	; 0x02
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	29 81       	ldd	r18, Y+1	; 0x01
    306e:	3a 81       	ldd	r19, Y+2	; 0x02
    3070:	8f 81       	ldd	r24, Y+7	; 0x07
    3072:	98 85       	ldd	r25, Y+8	; 0x08
    3074:	fc 01       	movw	r30, r24
    3076:	e2 0f       	add	r30, r18
    3078:	f3 1f       	adc	r31, r19
    307a:	80 81       	ld	r24, Z
    307c:	88 23       	and	r24, r24
    307e:	09 f0       	breq	.+2      	; 0x3082 <StrToInt+0xd4>
    3080:	bf cf       	rjmp	.-130    	; 0x3000 <StrToInt+0x52>
        else {
            break;
        }
    }

    return sign * res;
    3082:	2b 81       	ldd	r18, Y+3	; 0x03
    3084:	3c 81       	ldd	r19, Y+4	; 0x04
    3086:	8d 81       	ldd	r24, Y+5	; 0x05
    3088:	9e 81       	ldd	r25, Y+6	; 0x06
    308a:	ac 01       	movw	r20, r24
    308c:	24 9f       	mul	r18, r20
    308e:	c0 01       	movw	r24, r0
    3090:	25 9f       	mul	r18, r21
    3092:	90 0d       	add	r25, r0
    3094:	34 9f       	mul	r19, r20
    3096:	90 0d       	add	r25, r0
    3098:	11 24       	eor	r1, r1
}
    309a:	28 96       	adiw	r28, 0x08	; 8
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <SetArrToZero>:

void SetArrToZero(s8 *Copy_Array){
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	00 d0       	rcall	.+0      	; 0x30b2 <SetArrToZero+0x6>
    30b2:	0f 92       	push	r0
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	9b 83       	std	Y+3, r25	; 0x03
    30ba:	8a 83       	std	Y+2, r24	; 0x02
    u8 i=0;
    30bc:	19 82       	std	Y+1, r1	; 0x01
    30be:	0c c0       	rjmp	.+24     	; 0x30d8 <SetArrToZero+0x2c>
    while(*(Copy_Array+i) != '\0'){
        *(Copy_Array+i) = 0;
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	fc 01       	movw	r30, r24
    30cc:	e2 0f       	add	r30, r18
    30ce:	f3 1f       	adc	r31, r19
    30d0:	10 82       	st	Z, r1
        i++;
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	8f 5f       	subi	r24, 0xFF	; 255
    30d6:	89 83       	std	Y+1, r24	; 0x01
    return sign * res;
}

void SetArrToZero(s8 *Copy_Array){
    u8 i=0;
    while(*(Copy_Array+i) != '\0'){
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	28 2f       	mov	r18, r24
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	9b 81       	ldd	r25, Y+3	; 0x03
    30e2:	fc 01       	movw	r30, r24
    30e4:	e2 0f       	add	r30, r18
    30e6:	f3 1f       	adc	r31, r19
    30e8:	80 81       	ld	r24, Z
    30ea:	88 23       	and	r24, r24
    30ec:	49 f7       	brne	.-46     	; 0x30c0 <SetArrToZero+0x14>
        *(Copy_Array+i) = 0;
        i++;
    }
}
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	08 95       	ret

000030fa <GetKey>:

u8 GetKey(void){
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	0f 92       	push	r0
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	u8 x =0xff;
    3104:	8f ef       	ldi	r24, 0xFF	; 255
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	03 c0       	rjmp	.+6      	; 0x3110 <GetKey+0x16>
	while(x == 0xff){
		x = KPD_u8GetPressedKey();
    310a:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <KPD_u8GetPressedKey>
    310e:	89 83       	std	Y+1, r24	; 0x01
    }
}

u8 GetKey(void){
	u8 x =0xff;
	while(x == 0xff){
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	8f 3f       	cpi	r24, 0xFF	; 255
    3114:	d1 f3       	breq	.-12     	; 0x310a <GetKey+0x10>
		x = KPD_u8GetPressedKey();
	}
	return x;
    3116:	89 81       	ldd	r24, Y+1	; 0x01
}
    3118:	0f 90       	pop	r0
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	08 95       	ret

00003120 <main>:
 *      Author: Mohammed Gaafar
 */
#include "APP/APP.h"
#include <util/delay.h>
s8 Buffer[10];
int main (void){
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
    3128:	6a 97       	sbiw	r28, 0x1a	; 26
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    KPD_Init();
    3134:	0e 94 da 16 	call	0x2db4	; 0x2db4 <KPD_Init>
    LCD_4BitInitialize();
    3138:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <LCD_4BitInitialize>
    s16 Num1=0,Num2=0,Result=0;
    313c:	18 8e       	std	Y+24, r1	; 0x18
    313e:	1f 8a       	std	Y+23, r1	; 0x17
    3140:	1e 8a       	std	Y+22, r1	; 0x16
    3142:	1d 8a       	std	Y+21, r1	; 0x15
    3144:	1c 8a       	std	Y+20, r1	; 0x14
    3146:	1b 8a       	std	Y+19, r1	; 0x13
    u8 Operator =0,Buffer_Idx=0;
    3148:	1a 8a       	std	Y+18, r1	; 0x12
    314a:	19 8a       	std	Y+17, r1	; 0x11
    u8 Minus_Flag=0;
    314c:	18 8a       	std	Y+16, r1	; 0x10
    		LCD_GoToXY4Bit(3,0);
    314e:	83 e0       	ldi	r24, 0x03	; 3
    3150:	60 e0       	ldi	r22, 0x00	; 0
    3152:	0e 94 3c 0c 	call	0x1878	; 0x1878 <LCD_GoToXY4Bit>
        	LCD_WriteString4Bit("Calculator");
    3156:	80 e6       	ldi	r24, 0x60	; 96
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 0e 0c 	call	0x181c	; 0x181c <LCD_WriteString4Bit>
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	aa ef       	ldi	r26, 0xFA	; 250
    3164:	b4 e4       	ldi	r27, 0x44	; 68
    3166:	8b 87       	std	Y+11, r24	; 0x0b
    3168:	9c 87       	std	Y+12, r25	; 0x0c
    316a:	ad 87       	std	Y+13, r26	; 0x0d
    316c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3170:	7c 85       	ldd	r23, Y+12	; 0x0c
    3172:	8d 85       	ldd	r24, Y+13	; 0x0d
    3174:	9e 85       	ldd	r25, Y+14	; 0x0e
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	4a ef       	ldi	r20, 0xFA	; 250
    317c:	54 e4       	ldi	r21, 0x44	; 68
    317e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	8f 83       	std	Y+7, r24	; 0x07
    3188:	98 87       	std	Y+8, r25	; 0x08
    318a:	a9 87       	std	Y+9, r26	; 0x09
    318c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    318e:	6f 81       	ldd	r22, Y+7	; 0x07
    3190:	78 85       	ldd	r23, Y+8	; 0x08
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	9a 85       	ldd	r25, Y+10	; 0x0a
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e8       	ldi	r20, 0x80	; 128
    319c:	5f e3       	ldi	r21, 0x3F	; 63
    319e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a2:	88 23       	and	r24, r24
    31a4:	2c f4       	brge	.+10     	; 0x31b0 <main+0x90>
		__ticks = 1;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	9e 83       	std	Y+6, r25	; 0x06
    31ac:	8d 83       	std	Y+5, r24	; 0x05
    31ae:	3f c0       	rjmp	.+126    	; 0x322e <main+0x10e>
	else if (__tmp > 65535)
    31b0:	6f 81       	ldd	r22, Y+7	; 0x07
    31b2:	78 85       	ldd	r23, Y+8	; 0x08
    31b4:	89 85       	ldd	r24, Y+9	; 0x09
    31b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	3f ef       	ldi	r19, 0xFF	; 255
    31bc:	4f e7       	ldi	r20, 0x7F	; 127
    31be:	57 e4       	ldi	r21, 0x47	; 71
    31c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c4:	18 16       	cp	r1, r24
    31c6:	4c f5       	brge	.+82     	; 0x321a <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    31cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e2       	ldi	r20, 0x20	; 32
    31d6:	51 e4       	ldi	r21, 0x41	; 65
    31d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	9e 83       	std	Y+6, r25	; 0x06
    31ee:	8d 83       	std	Y+5, r24	; 0x05
    31f0:	0f c0       	rjmp	.+30     	; 0x3210 <main+0xf0>
    31f2:	88 ec       	ldi	r24, 0xC8	; 200
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	9c 83       	std	Y+4, r25	; 0x04
    31f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	f1 f7       	brne	.-4      	; 0x31fe <main+0xde>
    3202:	9c 83       	std	Y+4, r25	; 0x04
    3204:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	9e 81       	ldd	r25, Y+6	; 0x06
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	9e 83       	std	Y+6, r25	; 0x06
    320e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3210:	8d 81       	ldd	r24, Y+5	; 0x05
    3212:	9e 81       	ldd	r25, Y+6	; 0x06
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	69 f7       	brne	.-38     	; 0x31f2 <main+0xd2>
    3218:	14 c0       	rjmp	.+40     	; 0x3242 <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9e 83       	std	Y+6, r25	; 0x06
    322c:	8d 83       	std	Y+5, r24	; 0x05
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <main+0x11a>
    323e:	9a 83       	std	Y+2, r25	; 0x02
    3240:	89 83       	std	Y+1, r24	; 0x01
        	_delay_ms(2000);
        	LCD_ClearDisplay4Bit();
    3242:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_ClearDisplay4Bit>
    while(1){

        u8 Key = GetKey();
    3246:	0e 94 7d 18 	call	0x30fa	; 0x30fa <GetKey>
    324a:	8f 87       	std	Y+15, r24	; 0x0f
        if((Key >= '0' && Key <= '9') || (Key == '-' && Minus_Flag == 0)){
    324c:	8f 85       	ldd	r24, Y+15	; 0x0f
    324e:	80 33       	cpi	r24, 0x30	; 48
    3250:	18 f0       	brcs	.+6      	; 0x3258 <main+0x138>
    3252:	8f 85       	ldd	r24, Y+15	; 0x0f
    3254:	8a 33       	cpi	r24, 0x3A	; 58
    3256:	30 f0       	brcs	.+12     	; 0x3264 <main+0x144>
    3258:	8f 85       	ldd	r24, Y+15	; 0x0f
    325a:	8d 32       	cpi	r24, 0x2D	; 45
    325c:	a1 f4       	brne	.+40     	; 0x3286 <main+0x166>
    325e:	88 89       	ldd	r24, Y+16	; 0x10
    3260:	88 23       	and	r24, r24
    3262:	89 f4       	brne	.+34     	; 0x3286 <main+0x166>
            Buffer[Buffer_Idx++] = Key;
    3264:	89 89       	ldd	r24, Y+17	; 0x11
    3266:	88 2f       	mov	r24, r24
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	2f 85       	ldd	r18, Y+15	; 0x0f
    326c:	fc 01       	movw	r30, r24
    326e:	e4 57       	subi	r30, 0x74	; 116
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	20 83       	st	Z, r18
    3274:	89 89       	ldd	r24, Y+17	; 0x11
    3276:	8f 5f       	subi	r24, 0xFF	; 255
    3278:	89 8b       	std	Y+17, r24	; 0x11
            LCD_WriteData4Bit(Key);
    327a:	8f 85       	ldd	r24, Y+15	; 0x0f
    327c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <LCD_WriteData4Bit>
            Minus_Flag =1;
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	88 8b       	std	Y+16, r24	; 0x10
    3284:	e0 cf       	rjmp	.-64     	; 0x3246 <main+0x126>
        }
        else if(Key == '+' || (Key == '-' && Minus_Flag == 1 )|| Key == '*' || Key == '/' ){
    3286:	8f 85       	ldd	r24, Y+15	; 0x0f
    3288:	8b 32       	cpi	r24, 0x2B	; 43
    328a:	61 f0       	breq	.+24     	; 0x32a4 <main+0x184>
    328c:	8f 85       	ldd	r24, Y+15	; 0x0f
    328e:	8d 32       	cpi	r24, 0x2D	; 45
    3290:	19 f4       	brne	.+6      	; 0x3298 <main+0x178>
    3292:	88 89       	ldd	r24, Y+16	; 0x10
    3294:	81 30       	cpi	r24, 0x01	; 1
    3296:	31 f0       	breq	.+12     	; 0x32a4 <main+0x184>
    3298:	8f 85       	ldd	r24, Y+15	; 0x0f
    329a:	8a 32       	cpi	r24, 0x2A	; 42
    329c:	19 f0       	breq	.+6      	; 0x32a4 <main+0x184>
    329e:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a0:	8f 32       	cpi	r24, 0x2F	; 47
    32a2:	91 f4       	brne	.+36     	; 0x32c8 <main+0x1a8>
            Num1 = StrToInt(Buffer);
    32a4:	8c e8       	ldi	r24, 0x8C	; 140
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	0e 94 d7 17 	call	0x2fae	; 0x2fae <StrToInt>
    32ac:	98 8f       	std	Y+24, r25	; 0x18
    32ae:	8f 8b       	std	Y+23, r24	; 0x17
            Minus_Flag = 0;
    32b0:	18 8a       	std	Y+16, r1	; 0x10
            Buffer_Idx = 0;
    32b2:	19 8a       	std	Y+17, r1	; 0x11
            SetArrToZero(Buffer);
    32b4:	8c e8       	ldi	r24, 0x8C	; 140
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 56 18 	call	0x30ac	; 0x30ac <SetArrToZero>
            Operator = Key;
    32bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    32be:	8a 8b       	std	Y+18, r24	; 0x12
            LCD_WriteData4Bit(Key);
    32c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c2:	0e 94 c3 0a 	call	0x1586	; 0x1586 <LCD_WriteData4Bit>
    32c6:	bf cf       	rjmp	.-130    	; 0x3246 <main+0x126>
        }
        else if(Key == '='){
    32c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ca:	8d 33       	cpi	r24, 0x3D	; 61
    32cc:	09 f0       	breq	.+2      	; 0x32d0 <main+0x1b0>
    32ce:	68 c0       	rjmp	.+208    	; 0x33a0 <main+0x280>
            Num2 = StrToInt(Buffer);
    32d0:	8c e8       	ldi	r24, 0x8C	; 140
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 d7 17 	call	0x2fae	; 0x2fae <StrToInt>
    32d8:	9e 8b       	std	Y+22, r25	; 0x16
    32da:	8d 8b       	std	Y+21, r24	; 0x15
            Buffer_Idx = 0;
    32dc:	19 8a       	std	Y+17, r1	; 0x11
            SetArrToZero(Buffer);
    32de:	8c e8       	ldi	r24, 0x8C	; 140
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	0e 94 56 18 	call	0x30ac	; 0x30ac <SetArrToZero>
            switch(Operator){
    32e6:	8a 89       	ldd	r24, Y+18	; 0x12
    32e8:	28 2f       	mov	r18, r24
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	3a 8f       	std	Y+26, r19	; 0x1a
    32ee:	29 8f       	std	Y+25, r18	; 0x19
    32f0:	49 8d       	ldd	r20, Y+25	; 0x19
    32f2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    32f4:	4b 32       	cpi	r20, 0x2B	; 43
    32f6:	51 05       	cpc	r21, r1
    32f8:	b1 f0       	breq	.+44     	; 0x3326 <main+0x206>
    32fa:	89 8d       	ldd	r24, Y+25	; 0x19
    32fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32fe:	8c 32       	cpi	r24, 0x2C	; 44
    3300:	91 05       	cpc	r25, r1
    3302:	34 f4       	brge	.+12     	; 0x3310 <main+0x1f0>
    3304:	29 8d       	ldd	r18, Y+25	; 0x19
    3306:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3308:	2a 32       	cpi	r18, 0x2A	; 42
    330a:	31 05       	cpc	r19, r1
    330c:	f1 f0       	breq	.+60     	; 0x334a <main+0x22a>
    330e:	36 c0       	rjmp	.+108    	; 0x337c <main+0x25c>
    3310:	49 8d       	ldd	r20, Y+25	; 0x19
    3312:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3314:	4d 32       	cpi	r20, 0x2D	; 45
    3316:	51 05       	cpc	r21, r1
    3318:	79 f0       	breq	.+30     	; 0x3338 <main+0x218>
    331a:	89 8d       	ldd	r24, Y+25	; 0x19
    331c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    331e:	8f 32       	cpi	r24, 0x2F	; 47
    3320:	91 05       	cpc	r25, r1
    3322:	11 f1       	breq	.+68     	; 0x3368 <main+0x248>
    3324:	2b c0       	rjmp	.+86     	; 0x337c <main+0x25c>
                case '+': Result = Num1+Num2;   break;
    3326:	8f 89       	ldd	r24, Y+23	; 0x17
    3328:	98 8d       	ldd	r25, Y+24	; 0x18
    332a:	2d 89       	ldd	r18, Y+21	; 0x15
    332c:	3e 89       	ldd	r19, Y+22	; 0x16
    332e:	82 0f       	add	r24, r18
    3330:	93 1f       	adc	r25, r19
    3332:	9c 8b       	std	Y+20, r25	; 0x14
    3334:	8b 8b       	std	Y+19, r24	; 0x13
    3336:	22 c0       	rjmp	.+68     	; 0x337c <main+0x25c>
                case '-': Result = Num1-Num2;   break;
    3338:	8f 89       	ldd	r24, Y+23	; 0x17
    333a:	98 8d       	ldd	r25, Y+24	; 0x18
    333c:	2d 89       	ldd	r18, Y+21	; 0x15
    333e:	3e 89       	ldd	r19, Y+22	; 0x16
    3340:	82 1b       	sub	r24, r18
    3342:	93 0b       	sbc	r25, r19
    3344:	9c 8b       	std	Y+20, r25	; 0x14
    3346:	8b 8b       	std	Y+19, r24	; 0x13
    3348:	19 c0       	rjmp	.+50     	; 0x337c <main+0x25c>
                case '*': Result = Num1*Num2;   break;
    334a:	8f 89       	ldd	r24, Y+23	; 0x17
    334c:	98 8d       	ldd	r25, Y+24	; 0x18
    334e:	2d 89       	ldd	r18, Y+21	; 0x15
    3350:	3e 89       	ldd	r19, Y+22	; 0x16
    3352:	ac 01       	movw	r20, r24
    3354:	42 9f       	mul	r20, r18
    3356:	c0 01       	movw	r24, r0
    3358:	43 9f       	mul	r20, r19
    335a:	90 0d       	add	r25, r0
    335c:	52 9f       	mul	r21, r18
    335e:	90 0d       	add	r25, r0
    3360:	11 24       	eor	r1, r1
    3362:	9c 8b       	std	Y+20, r25	; 0x14
    3364:	8b 8b       	std	Y+19, r24	; 0x13
    3366:	0a c0       	rjmp	.+20     	; 0x337c <main+0x25c>
                case '/': Result = Num1/Num2;   break;
    3368:	8f 89       	ldd	r24, Y+23	; 0x17
    336a:	98 8d       	ldd	r25, Y+24	; 0x18
    336c:	2d 89       	ldd	r18, Y+21	; 0x15
    336e:	3e 89       	ldd	r19, Y+22	; 0x16
    3370:	b9 01       	movw	r22, r18
    3372:	0e 94 00 1a 	call	0x3400	; 0x3400 <__divmodhi4>
    3376:	cb 01       	movw	r24, r22
    3378:	9c 8b       	std	Y+20, r25	; 0x14
    337a:	8b 8b       	std	Y+19, r24	; 0x13
            }
            LCD_GoToXY4Bit(10,1);
    337c:	8a e0       	ldi	r24, 0x0A	; 10
    337e:	61 e0       	ldi	r22, 0x01	; 1
    3380:	0e 94 3c 0c 	call	0x1878	; 0x1878 <LCD_GoToXY4Bit>
            LCD_WriteData4Bit('=');
    3384:	8d e3       	ldi	r24, 0x3D	; 61
    3386:	0e 94 c3 0a 	call	0x1586	; 0x1586 <LCD_WriteData4Bit>
            LCD_WriteNumber4Bit(Result);
    338a:	8b 89       	ldd	r24, Y+19	; 0x13
    338c:	9c 89       	ldd	r25, Y+20	; 0x14
    338e:	aa 27       	eor	r26, r26
    3390:	97 fd       	sbrc	r25, 7
    3392:	a0 95       	com	r26
    3394:	ba 2f       	mov	r27, r26
    3396:	bc 01       	movw	r22, r24
    3398:	cd 01       	movw	r24, r26
    339a:	0e 94 5f 0c 	call	0x18be	; 0x18be <LCD_WriteNumber4Bit>
    339e:	53 cf       	rjmp	.-346    	; 0x3246 <main+0x126>
        }
        else if(Key == 'E'){
    33a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a2:	85 34       	cpi	r24, 0x45	; 69
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <main+0x288>
    33a6:	4f cf       	rjmp	.-354    	; 0x3246 <main+0x126>
        	LCD_ClearDisplay4Bit();
    33a8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_ClearDisplay4Bit>
        	SetArrToZero(Buffer);
    33ac:	8c e8       	ldi	r24, 0x8C	; 140
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 56 18 	call	0x30ac	; 0x30ac <SetArrToZero>
        	Buffer_Idx = 0;
    33b4:	19 8a       	std	Y+17, r1	; 0x11
        	Num1=0;Num2=0;Operator=0;
    33b6:	18 8e       	std	Y+24, r1	; 0x18
    33b8:	1f 8a       	std	Y+23, r1	; 0x17
    33ba:	1e 8a       	std	Y+22, r1	; 0x16
    33bc:	1d 8a       	std	Y+21, r1	; 0x15
    33be:	1a 8a       	std	Y+18, r1	; 0x12
    33c0:	42 cf       	rjmp	.-380    	; 0x3246 <main+0x126>

000033c2 <__mulsi3>:
    33c2:	62 9f       	mul	r22, r18
    33c4:	d0 01       	movw	r26, r0
    33c6:	73 9f       	mul	r23, r19
    33c8:	f0 01       	movw	r30, r0
    33ca:	82 9f       	mul	r24, r18
    33cc:	e0 0d       	add	r30, r0
    33ce:	f1 1d       	adc	r31, r1
    33d0:	64 9f       	mul	r22, r20
    33d2:	e0 0d       	add	r30, r0
    33d4:	f1 1d       	adc	r31, r1
    33d6:	92 9f       	mul	r25, r18
    33d8:	f0 0d       	add	r31, r0
    33da:	83 9f       	mul	r24, r19
    33dc:	f0 0d       	add	r31, r0
    33de:	74 9f       	mul	r23, r20
    33e0:	f0 0d       	add	r31, r0
    33e2:	65 9f       	mul	r22, r21
    33e4:	f0 0d       	add	r31, r0
    33e6:	99 27       	eor	r25, r25
    33e8:	72 9f       	mul	r23, r18
    33ea:	b0 0d       	add	r27, r0
    33ec:	e1 1d       	adc	r30, r1
    33ee:	f9 1f       	adc	r31, r25
    33f0:	63 9f       	mul	r22, r19
    33f2:	b0 0d       	add	r27, r0
    33f4:	e1 1d       	adc	r30, r1
    33f6:	f9 1f       	adc	r31, r25
    33f8:	bd 01       	movw	r22, r26
    33fa:	cf 01       	movw	r24, r30
    33fc:	11 24       	eor	r1, r1
    33fe:	08 95       	ret

00003400 <__divmodhi4>:
    3400:	97 fb       	bst	r25, 7
    3402:	09 2e       	mov	r0, r25
    3404:	07 26       	eor	r0, r23
    3406:	0a d0       	rcall	.+20     	; 0x341c <__divmodhi4_neg1>
    3408:	77 fd       	sbrc	r23, 7
    340a:	04 d0       	rcall	.+8      	; 0x3414 <__divmodhi4_neg2>
    340c:	27 d0       	rcall	.+78     	; 0x345c <__udivmodhi4>
    340e:	06 d0       	rcall	.+12     	; 0x341c <__divmodhi4_neg1>
    3410:	00 20       	and	r0, r0
    3412:	1a f4       	brpl	.+6      	; 0x341a <__divmodhi4_exit>

00003414 <__divmodhi4_neg2>:
    3414:	70 95       	com	r23
    3416:	61 95       	neg	r22
    3418:	7f 4f       	sbci	r23, 0xFF	; 255

0000341a <__divmodhi4_exit>:
    341a:	08 95       	ret

0000341c <__divmodhi4_neg1>:
    341c:	f6 f7       	brtc	.-4      	; 0x341a <__divmodhi4_exit>
    341e:	90 95       	com	r25
    3420:	81 95       	neg	r24
    3422:	9f 4f       	sbci	r25, 0xFF	; 255
    3424:	08 95       	ret

00003426 <__divmodsi4>:
    3426:	97 fb       	bst	r25, 7
    3428:	09 2e       	mov	r0, r25
    342a:	05 26       	eor	r0, r21
    342c:	0e d0       	rcall	.+28     	; 0x344a <__divmodsi4_neg1>
    342e:	57 fd       	sbrc	r21, 7
    3430:	04 d0       	rcall	.+8      	; 0x343a <__divmodsi4_neg2>
    3432:	28 d0       	rcall	.+80     	; 0x3484 <__udivmodsi4>
    3434:	0a d0       	rcall	.+20     	; 0x344a <__divmodsi4_neg1>
    3436:	00 1c       	adc	r0, r0
    3438:	38 f4       	brcc	.+14     	; 0x3448 <__divmodsi4_exit>

0000343a <__divmodsi4_neg2>:
    343a:	50 95       	com	r21
    343c:	40 95       	com	r20
    343e:	30 95       	com	r19
    3440:	21 95       	neg	r18
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	4f 4f       	sbci	r20, 0xFF	; 255
    3446:	5f 4f       	sbci	r21, 0xFF	; 255

00003448 <__divmodsi4_exit>:
    3448:	08 95       	ret

0000344a <__divmodsi4_neg1>:
    344a:	f6 f7       	brtc	.-4      	; 0x3448 <__divmodsi4_exit>
    344c:	90 95       	com	r25
    344e:	80 95       	com	r24
    3450:	70 95       	com	r23
    3452:	61 95       	neg	r22
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	8f 4f       	sbci	r24, 0xFF	; 255
    3458:	9f 4f       	sbci	r25, 0xFF	; 255
    345a:	08 95       	ret

0000345c <__udivmodhi4>:
    345c:	aa 1b       	sub	r26, r26
    345e:	bb 1b       	sub	r27, r27
    3460:	51 e1       	ldi	r21, 0x11	; 17
    3462:	07 c0       	rjmp	.+14     	; 0x3472 <__udivmodhi4_ep>

00003464 <__udivmodhi4_loop>:
    3464:	aa 1f       	adc	r26, r26
    3466:	bb 1f       	adc	r27, r27
    3468:	a6 17       	cp	r26, r22
    346a:	b7 07       	cpc	r27, r23
    346c:	10 f0       	brcs	.+4      	; 0x3472 <__udivmodhi4_ep>
    346e:	a6 1b       	sub	r26, r22
    3470:	b7 0b       	sbc	r27, r23

00003472 <__udivmodhi4_ep>:
    3472:	88 1f       	adc	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	5a 95       	dec	r21
    3478:	a9 f7       	brne	.-22     	; 0x3464 <__udivmodhi4_loop>
    347a:	80 95       	com	r24
    347c:	90 95       	com	r25
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	08 95       	ret

00003484 <__udivmodsi4>:
    3484:	a1 e2       	ldi	r26, 0x21	; 33
    3486:	1a 2e       	mov	r1, r26
    3488:	aa 1b       	sub	r26, r26
    348a:	bb 1b       	sub	r27, r27
    348c:	fd 01       	movw	r30, r26
    348e:	0d c0       	rjmp	.+26     	; 0x34aa <__udivmodsi4_ep>

00003490 <__udivmodsi4_loop>:
    3490:	aa 1f       	adc	r26, r26
    3492:	bb 1f       	adc	r27, r27
    3494:	ee 1f       	adc	r30, r30
    3496:	ff 1f       	adc	r31, r31
    3498:	a2 17       	cp	r26, r18
    349a:	b3 07       	cpc	r27, r19
    349c:	e4 07       	cpc	r30, r20
    349e:	f5 07       	cpc	r31, r21
    34a0:	20 f0       	brcs	.+8      	; 0x34aa <__udivmodsi4_ep>
    34a2:	a2 1b       	sub	r26, r18
    34a4:	b3 0b       	sbc	r27, r19
    34a6:	e4 0b       	sbc	r30, r20
    34a8:	f5 0b       	sbc	r31, r21

000034aa <__udivmodsi4_ep>:
    34aa:	66 1f       	adc	r22, r22
    34ac:	77 1f       	adc	r23, r23
    34ae:	88 1f       	adc	r24, r24
    34b0:	99 1f       	adc	r25, r25
    34b2:	1a 94       	dec	r1
    34b4:	69 f7       	brne	.-38     	; 0x3490 <__udivmodsi4_loop>
    34b6:	60 95       	com	r22
    34b8:	70 95       	com	r23
    34ba:	80 95       	com	r24
    34bc:	90 95       	com	r25
    34be:	9b 01       	movw	r18, r22
    34c0:	ac 01       	movw	r20, r24
    34c2:	bd 01       	movw	r22, r26
    34c4:	cf 01       	movw	r24, r30
    34c6:	08 95       	ret

000034c8 <__prologue_saves__>:
    34c8:	2f 92       	push	r2
    34ca:	3f 92       	push	r3
    34cc:	4f 92       	push	r4
    34ce:	5f 92       	push	r5
    34d0:	6f 92       	push	r6
    34d2:	7f 92       	push	r7
    34d4:	8f 92       	push	r8
    34d6:	9f 92       	push	r9
    34d8:	af 92       	push	r10
    34da:	bf 92       	push	r11
    34dc:	cf 92       	push	r12
    34de:	df 92       	push	r13
    34e0:	ef 92       	push	r14
    34e2:	ff 92       	push	r15
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17
    34e8:	cf 93       	push	r28
    34ea:	df 93       	push	r29
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    34f0:	ca 1b       	sub	r28, r26
    34f2:	db 0b       	sbc	r29, r27
    34f4:	0f b6       	in	r0, 0x3f	; 63
    34f6:	f8 94       	cli
    34f8:	de bf       	out	0x3e, r29	; 62
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	cd bf       	out	0x3d, r28	; 61
    34fe:	09 94       	ijmp

00003500 <__epilogue_restores__>:
    3500:	2a 88       	ldd	r2, Y+18	; 0x12
    3502:	39 88       	ldd	r3, Y+17	; 0x11
    3504:	48 88       	ldd	r4, Y+16	; 0x10
    3506:	5f 84       	ldd	r5, Y+15	; 0x0f
    3508:	6e 84       	ldd	r6, Y+14	; 0x0e
    350a:	7d 84       	ldd	r7, Y+13	; 0x0d
    350c:	8c 84       	ldd	r8, Y+12	; 0x0c
    350e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3510:	aa 84       	ldd	r10, Y+10	; 0x0a
    3512:	b9 84       	ldd	r11, Y+9	; 0x09
    3514:	c8 84       	ldd	r12, Y+8	; 0x08
    3516:	df 80       	ldd	r13, Y+7	; 0x07
    3518:	ee 80       	ldd	r14, Y+6	; 0x06
    351a:	fd 80       	ldd	r15, Y+5	; 0x05
    351c:	0c 81       	ldd	r16, Y+4	; 0x04
    351e:	1b 81       	ldd	r17, Y+3	; 0x03
    3520:	aa 81       	ldd	r26, Y+2	; 0x02
    3522:	b9 81       	ldd	r27, Y+1	; 0x01
    3524:	ce 0f       	add	r28, r30
    3526:	d1 1d       	adc	r29, r1
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	f8 94       	cli
    352c:	de bf       	out	0x3e, r29	; 62
    352e:	0f be       	out	0x3f, r0	; 63
    3530:	cd bf       	out	0x3d, r28	; 61
    3532:	ed 01       	movw	r28, r26
    3534:	08 95       	ret

00003536 <_exit>:
    3536:	f8 94       	cli

00003538 <__stop_program>:
    3538:	ff cf       	rjmp	.-2      	; 0x3538 <__stop_program>
